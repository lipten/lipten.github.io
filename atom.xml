<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lipten主页</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lipten.github.io/"/>
  <updated>2018-08-28T08:55:52.259Z</updated>
  <id>http://lipten.github.io/</id>
  
  <author>
    <name>lipten</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记第一次在程序中埋彩蛋🎁</title>
    <link href="http://lipten.github.io/2018/08/28/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%9C%A8%E7%A8%8B%E5%BA%8F%E4%B8%AD%E5%9F%8B%E4%BA%86%E5%BD%A9%E8%9B%8B/"/>
    <id>http://lipten.github.io/2018/08/28/记第一次在程序中埋了彩蛋/</id>
    <published>2018-08-28T06:08:12.000Z</published>
    <updated>2018-08-28T08:55:52.259Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记第一次在程序中埋彩蛋"><a href="#记第一次在程序中埋彩蛋" class="headerlink" title="记第一次在程序中埋彩蛋"></a>记第一次在程序中埋彩蛋</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>相信进来的观众一定很想知道我究竟埋了什么彩蛋🤔，这里说的“彩蛋”，指的是程序里的彩蛋(我的理解是一种区别于程序本身别有洞天的一番景象，并具有一定代表意义的小程序)，<br>我埋的彩蛋的是在一个网站里的，彩蛋必须是玩家自己找到才有用的，先看看下面的彩蛋提示再进入网站找彩蛋哈。</p><h3 id="彩蛋提示"><a href="#彩蛋提示" class="headerlink" title="彩蛋提示"></a>彩蛋提示</h3><p>埋彩蛋的程序是<a href="https://www.codemao.cn" target="_blank" rel="noopener">编程猫官网</a>，用浏览器访问，再打开浏览器的开发者工具的控制台。<br>可以看到一个大大的codemao字符画(如果看不清楚可以拉大控制台的窗口大小)，就是下面这个字符画</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line">                      █████                                            </span><br><span class="line">                      ░░███                                             </span><br><span class="line">  ██████   ██████   ███████   ██████  █████████████    ██████    ██████ </span><br><span class="line"> ███░░███ ███░░███ ███░░███  ███░░███░░███░░███░░███  ░░░░░███  ███░░███</span><br><span class="line">░███ ░░░ ░███ ░███░███ ░███ ░███████  ░███ ░███ ░███   ███████ ░███ ░███</span><br><span class="line">░███  ███░███ ░███░███ ░███ ░███░░░   ░███ ░███ ░███  ███░░███ ░███ ░███</span><br><span class="line">░░██████ ░░██████ ░░████████░░██████  █████░███ █████░░████████░░██████ </span><br><span class="line"> ░░░░░░   ░░░░░░   ░░░░░░░░  ░░░░░░  ░░░░░ ░░░ ░░░░░  ░░░░░░░░  ░░░░░░  </span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">发挥你们的探索能力，看看能不能在控制台里找到跟这个字符画有关的彩蛋。</span><br><span class="line"></span><br><span class="line">找到的话如果觉得有意思的话可以点个赞或者发评论提点提点，有更好的想法都可以提哈。</span><br><span class="line"></span><br><span class="line">没找到的话下面就是彩蛋答案，但是记住彩蛋必须是玩家自己找到才有用的，所以想清楚再决定看不看答案。</span><br><span class="line"></span><br><span class="line">------------</span><br><span class="line"></span><br><span class="line">### 彩蛋答案</span><br><span class="line"></span><br><span class="line">其实很容易能找到彩蛋，当你看到控制台上那么显眼的codemao字符画时，其实重点不在字符画，而是`codemao`这几个字符，尝试在控制台里输入`codemao`，你会发现`codemao`是一个全局变量，按回车打印出来的值就是彩蛋入口了！</span><br><span class="line">而打印出来的值就是&quot;恭喜少年，你找到了编程猫的第一颗彩蛋，输入 start(); 后即可开始《编程猫躲车车》游戏！&quot;，继续在控制台输入`start()`即可触发彩蛋游戏。</span><br><span class="line"></span><br><span class="line">### 埋这个彩蛋的缘由和我的想法：</span><br><span class="line"></span><br><span class="line">为啥突然想到要在自己开发的网站上埋这个彩蛋呢，可能是因为开发工作时间长了，想在工作中增加点趣味，也可以给用户一个耳目一新的感觉，自己擅自加了这么个需求哈哈。做完这个彩蛋之后给到产品经理看，觉得很有意思，而且具有传播价值，所以值得一试。</span><br><span class="line">然而有个运营同事听闻此事后却跟我说起教来，“彩蛋应该怎么做才有价值，才能运营起来blablabla”的，我是听不懂，作为一个程序员，我觉得不要为了“埋彩蛋”而“埋彩蛋”，我做这个彩蛋的时候没有太多想法，并不是考虑怎么运营才怎么设计的，也不是想着怎么设计彩蛋而设计彩蛋。</span><br><span class="line"></span><br><span class="line">“史上第一款含有彩蛋的游戏”——《冒险/魔幻历险(Adventure)》深入人心，而《Starship 1》的开发者因为年代久远，Ron Milner早已忘记该怎么触发彩蛋，40多年后查了代码费尽周折才找到。</span><br><span class="line"></span><br><span class="line">我觉得一个程序员在自己的程序里埋彩蛋，完全是出于自己的第一想法，这个想法可以是像Warren Robinett一样为了打破雅达利的约束让自己的名字留在游戏里，也可以像Ron Milner一样为了让玩家探索彩蛋，发现自己的名字，得到10条命的奖励。</span><br><span class="line"></span><br><span class="line">而我设计这个彩蛋的想法，是因为我发现了可以在控制台里跑起来的字符小游戏《编程猫躲车车》，这有别于编程猫创作工具做出来的作品，一贯的在网页里运行的小游戏，同样是简单的操作，放到控制台运行却别有一番天地，虽然画质低劣又清奇，体验也差，但足以达到我理解的彩蛋效果，有别于程序本身的小游戏，codemao代表了编程猫，说不定还能激发用户的创作欲望和创意呢。。。</span><br><span class="line"></span><br><span class="line">&gt; 以上纯属个人观点，如有写的不正当的地方可以权威批评</span><br><span class="line"></span><br><span class="line">### 最后</span><br><span class="line">其实这个彩蛋游戏是从网上搬过来的，只是换了猫和车而已，感谢知乎大佬[小芋头君](https://www.zhihu.com/people/li-shou-xin/activities)的分享，啥也不说了，源码奉上：</span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">(function()&#123;</span><br><span class="line">  if(!window.console)&#123;window.console =&#123;log:function()&#123;&#125;&#125;;return;&#125;</span><br><span class="line">  var me = 19;</span><br><span class="line">  var Star = function()&#123;</span><br><span class="line">    this.x=0;</span><br><span class="line">    this.speed = 1;</span><br><span class="line">    this.y=0;</span><br><span class="line">  &#125;</span><br><span class="line">  var score = 0;</span><br><span class="line">  var strs = function()&#123;</span><br><span class="line">    var result = &apos;&apos;;</span><br><span class="line">    for(var i=0;i&lt;20;i++)&#123;</span><br><span class="line">      result+=&quot;\n&quot;</span><br><span class="line">      for(var n =0;n&lt;40;n++)&#123;</span><br><span class="line">        var now = &apos;一&apos;</span><br><span class="line">        if(i==19&amp;&amp;n==me)&#123;</span><br><span class="line">          now=&quot;码&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        if(i==19&amp;&amp;n==me+1)&#123;</span><br><span class="line">          now=&quot;农&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        stars.forEach(function(star)&#123;</span><br><span class="line">          var x= Math.floor(star.x);</span><br><span class="line">          var y = Math.floor(star.y)</span><br><span class="line">          if(x==n&amp;&amp;y==i)&#123;</span><br><span class="line">            if(Math.abs(star.y-19)&lt;1&amp;&amp;(n==me||n==me+1))&#123;</span><br><span class="line">              die()</span><br><span class="line">            &#125;</span><br><span class="line">            now=&quot;车&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        result+=now;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    result+=&quot;       《全民躲车车》得分：&quot;+score</span><br><span class="line">    return result;</span><br><span class="line">  &#125;</span><br><span class="line">  window.onkeydown = function(e)&#123;</span><br><span class="line">    if(e.keyCode==37)&#123;</span><br><span class="line">      me-=1;</span><br><span class="line">      if(me&lt;0) me=0;</span><br><span class="line">    &#125;else if(e.keyCode==39)&#123;</span><br><span class="line">      me+=1</span><br><span class="line">      if(me&gt;38) me=38</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var count=0;</span><br><span class="line">var die = function()&#123;</span><br><span class="line">  clearInterval(timer1)</span><br><span class="line">  clearInterval(timer2)</span><br><span class="line">  clearInterval(timer3)</span><br><span class="line">  setTimeout(function()&#123;</span><br><span class="line">    console.log(&quot;游戏结束，您的得分：&quot;+score+&quot;,分享到微博：%o&quot;,&quot;http://service.weibo.com/share/share.php?url=http%3A%2F%2Ftangeche.com&amp;pic=http://img.souche.com/test/aab0c3d397799533e446759083c2f97c.gif&amp;title=%E6%88%91%E5%9C%A8%E3%80%90%E5%BC%B9%E4%B8%AA%E8%BD%A6%E3%80%91%E7%8E%A9%E7%A0%81%E5%86%9C%E4%B8%93%E6%9C%89%E6%B8%B8%E6%88%8F%E3%80%8A%E7%A0%81%E5%86%9C%E8%BA%B2%E8%BD%A6%E8%BD%A6%E3%80%8B%E8%8E%B7%E5%BE%97%E4%BA%86&quot;+score+&quot;%E5%88%86%2C%E5%BF%AB%E6%9D%A5%E6%8C%91%E6%88%98%E6%AF%94%E6%AF%94%E7%9C%8B%E3%80%82%E7%94%A8%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%93%E5%BC%80www.tangeche.com%E9%A6%96%E9%A1%B5%EF%BC%8C%E6%89%93%E5%BC%80%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E7%9A%84%E6%8E%A7%E5%88%B6%E5%8F%B0%EF%BC%8C%E8%BE%93%E5%85%A5start%28%29%3B%E5%9B%9E%E8%BD%A6%EF%BC%8C%E7%84%B6%E5%90%8E%E6%8C%89%E7%85%A7%E6%8F%90%E7%A4%BA%E5%8D%B3%E5%8F%AF%E5%BC%80%E5%A7%8B%E6%B8%B8%E6%88%8F%E3%80%82%40%E5%BC%B9%E4%B8%AA%E8%BD%A6&quot;)</span><br><span class="line">  &#125;,100)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">var stars = []</span><br><span class="line">var appearP = 1</span><br><span class="line">var timer1,timer2,timer3;</span><br><span class="line">var begin = function()&#123;</span><br><span class="line">  timer1 = setInterval(function()&#123;</span><br><span class="line">    var createCount=Math.floor(Math.random()*5*appearP)</span><br><span class="line">    for(var i=0;i&lt;createCount;i++)&#123;</span><br><span class="line">      var star = new Star();</span><br><span class="line">      star.x = Math.floor(Math.random()*40)</span><br><span class="line">      star.y = 0;</span><br><span class="line">          star.speed = Math.random()*appearP;//Math.floor(Math.random()*3+1)</span><br><span class="line">          stars.push(star)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;,1000)</span><br><span class="line">  timer2 = setInterval(function()&#123;</span><br><span class="line">    stars.forEach(function(star,i)&#123;</span><br><span class="line">      star.y+=star.speed;</span><br><span class="line">      if (star.y&gt;=31)&#123;</span><br><span class="line">        stars.splice(i,1);</span><br><span class="line">        score++</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    console.log(strs())</span><br><span class="line">    count++;</span><br><span class="line">    if(count&gt;300)&#123;</span><br><span class="line">      console.clear()</span><br><span class="line">      count = 0;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,100)</span><br><span class="line">  timer3 = setInterval(function()&#123;</span><br><span class="line">    appearP*=1.1</span><br><span class="line">  &#125;,3000)</span><br><span class="line">&#125;</span><br><span class="line">console.log(&quot;输入 start(); 后即可开始《码农躲车车》游戏！&quot;)</span><br><span class="line">window.start = function()&#123;</span><br><span class="line">  appearP=1.1</span><br><span class="line">  starts=[];</span><br><span class="line">  score=0;</span><br><span class="line">  me = 19;</span><br><span class="line">  count = 0;</span><br><span class="line">  console.log(&quot;%c请先用鼠标点击一下弹个车网页页面，游戏需要捕捉网页上的键盘事件（你应该懂吧）！&quot;,&quot;font-size:16px;color:#ff6700;&quot;)</span><br><span class="line">  console.log(&quot;使用键盘左右键移动最下方的码农，躲开所有的汽车，汽车数量和速度会一直增加，看看谁坚持的最久吧！&quot;)</span><br><span class="line"></span><br><span class="line">  var countdown = 6;</span><br><span class="line">  setTimeout(function()&#123;</span><br><span class="line">    if(countdown--&lt;=1)&#123;</span><br><span class="line">      begin();</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      console.log(countdown)</span><br><span class="line">      setTimeout(arguments.callee,1000)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,1000)</span><br><span class="line">  return (&quot;倒计时！&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;记第一次在程序中埋彩蛋&quot;&gt;&lt;a href=&quot;#记第一次在程序中埋彩蛋&quot; class=&quot;headerlink&quot; title=&quot;记第一次在程序中埋彩蛋&quot;&gt;&lt;/a&gt;记第一次在程序中埋彩蛋&lt;/h1&gt;&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://lipten.github.io/tags/javascript/"/>
    
      <category term="分享创造" scheme="http://lipten.github.io/tags/%E5%88%86%E4%BA%AB%E5%88%9B%E9%80%A0/"/>
    
  </entry>
  
  <entry>
    <title>js将用户上传gif动图分解成多张帧图片</title>
    <link href="http://lipten.github.io/2018/08/27/js%E5%B0%86%E7%94%A8%E6%88%B7%E4%B8%8A%E4%BC%A0gif%E5%8A%A8%E5%9B%BE%E5%88%86%E8%A7%A3%E6%88%90%E5%A4%9A%E5%BC%A0%E5%B8%A7%E5%9B%BE%E7%89%87/"/>
    <id>http://lipten.github.io/2018/08/27/js将用户上传gif动图分解成多张帧图片/</id>
    <published>2018-08-27T08:19:54.000Z</published>
    <updated>2018-08-27T09:13:18.763Z</updated>
    
    <content type="html"><![CDATA[<h1 id="js将用户上传gif动图分解成多张帧图片"><a href="#js将用户上传gif动图分解成多张帧图片" class="headerlink" title="js将用户上传gif动图分解成多张帧图片"></a>js将用户上传gif动图分解成多张帧图片</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>工作中遇到一个这么一个需求：这是一个多图上传的场景，如果用户上传选择多张图片，则上传后直接展示多张图片，如果上传的图片是gif动图，则需要分解这张动图拆分成一帧一帧的单张图片，再按顺序展示出来。</p><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><h3 id="这里主要针对gif分解多图的实现"><a href="#这里主要针对gif分解多图的实现" class="headerlink" title="这里主要针对gif分解多图的实现"></a>这里主要针对gif分解多图的实现</h3><ol><li>首先对用户上传的文件格式进行判断；</li><li>将gif动图经过 <a href="https://github.com/buzzfeed/libgif-js/blob/master/libgif.js" target="_blank" rel="noopener">gif库</a> 解析成gif实例</li><li>遍历获取gif实例的每一帧的canvas，转换成baseURL，再转一份file对象存放起来。</li><li>通过转换后的baseURL展示到界面，用户点上传就把对应的file对象上传服务器。</li></ol><p>这里最核心的就是2，3步，非常庆幸有<a href="https://github.com/buzzfeed/libgif-js" target="_blank" rel="noopener">https://github.com/buzzfeed/libgif-js</a> 这个库，才得以实现后面的步骤；</p><h2 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h2><p>由于是公司项目就不展示界面和完整代码，只放关键代码：</p><h3 id="0-引入gif库"><a href="#0-引入gif库" class="headerlink" title="0. 引入gif库"></a>0. 引入gif库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; SuperGif &#125; from  &apos;./libgif.js&apos;</span><br></pre></td></tr></table></figure><h3 id="1-对用户上传的文件格式进行判断"><a href="#1-对用户上传的文件格式进行判断" class="headerlink" title="1. 对用户上传的文件格式进行判断"></a>1. 对用户上传的文件格式进行判断</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断文件格式并展示的函数</span></span><br><span class="line">pre_upload() &#123;</span><br><span class="line">    <span class="comment">// 点击上传按钮触发弹出文件选择框</span></span><br><span class="line">    <span class="keyword">const</span> input = <span class="built_in">document</span>.createElement(<span class="string">'input'</span>);</span><br><span class="line">    input.setAttribute(<span class="string">'type'</span>, <span class="string">'file'</span>);</span><br><span class="line">    <span class="comment">// 注意要设置多选属性</span></span><br><span class="line">    input.setAttribute(<span class="string">'multiple'</span>, <span class="string">'true'</span>);</span><br><span class="line">    input.addEventListener(<span class="string">'change'</span>, (e) =&gt; &#123;</span><br><span class="line">        <span class="keyword">this</span>.img_list = [];</span><br><span class="line">        <span class="keyword">this</span>.can_upload = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.qiniu_url_list = [];</span><br><span class="line">        <span class="comment">// 判断是gif格式则交给this.pre_load_gif函数处理</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/(image\/gif)/</span>.test(e.path[<span class="number">0</span>].files[<span class="number">0</span>].type)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.pre_load_gif(e.path[<span class="number">0</span>].files[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果是上传多张静态的png、jpg图片则直接转换成baseURL</span></span><br><span class="line">        <span class="keyword">var</span> img_list = [];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>,item; item = e.path[<span class="number">0</span>].files[i]; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="regexp">/(image\/png)|(image\/jp(e?)g)/</span>.test(item.type)) &#123;</span><br><span class="line">                alert(<span class="string">'请上传jpg、png格式的图片'</span>)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            img_list.push(&#123;</span><br><span class="line">                file_name: item.name,</span><br><span class="line">                url: URL.createObjectURL(item),</span><br><span class="line">                file: item,</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.img_list = img_list</span><br><span class="line">    &#125;);</span><br><span class="line">    input.click();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="2-分解gif图片"><a href="#2-分解gif图片" class="headerlink" title="2. 分解gif图片"></a>2. 分解gif图片</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">dataURLtoFile(dataurl, filename) &#123;</span><br><span class="line">    <span class="keyword">const</span> arr = dataurl.split(<span class="string">','</span>);</span><br><span class="line">    <span class="keyword">const</span> mime = arr[<span class="number">0</span>].match(<span class="regexp">/:(.*?);/</span>)[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">const</span> bstr = atob(arr[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">var</span> n = bstr.length;</span><br><span class="line">    <span class="keyword">const</span> u8arr = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(n);</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        u8arr[n] = bstr.charCodeAt(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> File([u8arr], filename, &#123;<span class="attr">type</span>:mime&#125;);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 将canvas转换成file对象</span></span><br><span class="line">convertCanvasToImage(canvas, filename) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.dataURLtoFile(canvas.toDataURL(<span class="string">'image/png'</span>), filename);</span><br><span class="line">&#125;,</span><br><span class="line">pre_load_gif(gif_source) &#123;</span><br><span class="line">    <span class="keyword">var</span> img_list = [];</span><br><span class="line">    <span class="keyword">const</span> gifImg = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">    <span class="comment">// gif库需要img标签配置下面两个属性</span></span><br><span class="line">    gifImg.setAttribute(<span class="string">'rel:animated_src'</span>, URL.createObjectURL(gif_source))</span><br><span class="line">    gifImg.setAttribute(<span class="string">'rel:auto_play'</span>, <span class="string">'0'</span>)</span><br><span class="line">    <span class="comment">// 新建gif实例</span></span><br><span class="line">    <span class="keyword">var</span> rub = <span class="keyword">new</span> SuperGif(&#123; <span class="attr">gif</span>: gifImg &#125; );</span><br><span class="line">    rub.load(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> img_list = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">1</span>; i &lt;= rub.get_length(); i++) &#123;</span><br><span class="line">            <span class="comment">// 遍历gif实例的每一帧</span></span><br><span class="line">            rub.move_to(i);</span><br><span class="line">            <span class="comment">// 将每一帧的canvas转换成file对象</span></span><br><span class="line">            <span class="keyword">let</span> cur_file = <span class="keyword">this</span>.convertCanvasToImage(rub.get_canvas(), gif_source.name.replace(<span class="string">'.gif'</span>, <span class="string">''</span>) + <span class="string">`-<span class="subst">$&#123;i&#125;</span>`</span>)</span><br><span class="line">            img_list.push(&#123;</span><br><span class="line">                file_name: cur_file.name,</span><br><span class="line">                url: URL.createObjectURL(cur_file),</span><br><span class="line">                file: cur_file,</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.img_list = img_list</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>至此，核心功能基本实现，上面的函数已经将gif分解成多张图片存放在this.img_list 这个数组里面。</p><p>接下来只要拿img_list数组里的file对象上传到服务器即可。</p><p>上传方式各不相同，这里就不放具体代码了，需要注意的是，图片上传是异步操作，多图上传需要得知所有的图片全部上传成功才能确定上传完成，所以如果上传的函数返回的是promise对象，则可以直接用<code>Promise.all</code>函数即可得知所有图片上传完毕的回调。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;js将用户上传gif动图分解成多张帧图片&quot;&gt;&lt;a href=&quot;#js将用户上传gif动图分解成多张帧图片&quot; class=&quot;headerlink&quot; title=&quot;js将用户上传gif动图分解成多张帧图片&quot;&gt;&lt;/a&gt;js将用户上传gif动图分解成多张帧图片&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://lipten.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>时隔两年，更新了一下下以前的教程网站。</title>
    <link href="http://lipten.github.io/2018/08/27/%E6%97%B6%E9%9A%94%E4%B8%A4%E5%B9%B4%EF%BC%8C%E6%9B%B4%E6%96%B0%E4%BA%86%E4%B8%80%E4%B8%8B%E4%B8%8B%E4%BB%A5%E5%89%8D%E7%9A%84%E6%95%99%E7%A8%8B%E7%BD%91%E7%AB%99%E3%80%82/"/>
    <id>http://lipten.github.io/2018/08/27/时隔两年，更新了一下下以前的教程网站。/</id>
    <published>2018-08-27T07:49:50.000Z</published>
    <updated>2018-08-28T06:00:09.338Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>事情的缘由：<a href="https://www.v2ex.com/t/275010#reply63" target="_blank" rel="noopener">https://www.v2ex.com/t/275010#reply63</a><br>以前脑袋一热写了个教程网站：<a href="http://codeasily.net" target="_blank" rel="noopener">http://codeasily.net</a></p><h2 id="更新内容："><a href="#更新内容：" class="headerlink" title="更新内容："></a>更新内容：</h2><ul><li>这次用 vue 框架结合Tiny-editor做个简单的编辑器，仿造 jsbin，还自己实现了 console 面板;</li><li>再把之前的教程网站放进来，加个编辑器的入口。</li><li>之前的多说评论插件挂了，貌似现在国内的免费评论插件基本挂了，换成了来必力的评论插件，需要翻墙额。</li><li>体验编辑器可以进入 <a href="http://www.codeasily.net/editor" target="_blank" rel="noopener">http://www.codeasily.net/editor</a></li></ul><h3 id="有话想说"><a href="#有话想说" class="headerlink" title="有话想说"></a>有话想说</h3><p>回顾两年前的那篇帖子，以前那个时候学习前端的教程资源和对前端的认知比较守旧👨‍🌾‍，所以自己写教程👨‍💻‍，当时还有很多评论说做的挺好希望出多点教程，可惜毕业后一直忙于工作而且写教程消耗大量时间精力，就一直搁着了，非常感谢当时鼓励我的小伙伴👏。</p><p>现在翻看慕课网的一些课程，确实与时俱进多了一些前端真正该学的东西并且能提高行业竞争力的教程📚，出来工作 2 年认识的前端开发人员的整体姿势水平都提高了📈，也包括我自己😌。</p><p>这次做的这个编辑器只是为了完善两年前写的丑丑的 demo，改善一下界面和体验，还有今年写了个 web 端的 console 组件，用来填补这个编辑器的一个功能，也当做学习了。</p><p>我做这个编辑器不为发展成主业或者明星产品，市面上功能更强大的编辑器有很多，只是我喜欢动手体验学习，即使是轮子，只要能给我带来提升，都值得一试☝️</p><p>我是一个喜欢实践代替看教程的人，即使做的不怎么样，自己心里觉得满足就够了👌</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;事情的缘由：&lt;a href=&quot;https://www.v2ex.com/t/275010#reply63&quot; target=&quot;
      
    
    </summary>
    
    
      <category term="分享创造" scheme="http://lipten.github.io/tags/%E5%88%86%E4%BA%AB%E5%88%9B%E9%80%A0/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript + 大型项目实战</title>
    <link href="http://lipten.github.io/2018/07/24/TypeScript-%E5%A4%A7%E5%9E%8B%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    <id>http://lipten.github.io/2018/07/24/TypeScript-大型项目实战/</id>
    <published>2018-07-24T06:06:28.000Z</published>
    <updated>2018-08-03T11:01:12.664Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://user-gold-cdn.xitu.io/2018/7/22/164c26af17fabb35?imageView2/1/w/1304/h/734/q/85/format/webp/interlace/1" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><blockquote><p>转载地址：<a href="https://juejin.im/post/5b54886ce51d45198f5c75d7" target="_blank" rel="noopener">https://juejin.im/post/5b54886ce51d45198f5c75d7</a></p></blockquote><h1 id="TypeScript-大型项目实战"><a href="#TypeScript-大型项目实战" class="headerlink" title="TypeScript + 大型项目实战"></a>TypeScript + 大型项目实战</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><hr><p>TypeScript 已经出来很久了，很多大公司很多大项目也都在使用它进行开发。上个月，我这边也正式跟进一个对集团的大型运维类项目。</p><p>项目要做的事情大致分为以下几个大模块</p><ul><li>一站式管理平台</li><li>规模化运维能力</li><li>预案平台</li><li>巡检平台</li><li>全链路压测等</li></ul><p>每一个模块要做的事情也很多，由于牵扯到公司业务，具体要做的一些事情这里我就不一一列举了，反正项目整体规模还是很大的。</p><h2 id="一、关于选型"><a href="#一、关于选型" class="headerlink" title="一、关于选型"></a>一、关于选型</h2><p>在做了一些技术调研后，再结合项目之后的开发量级以及维护成本。最终我和同事在技术选型上得出一致结论，最终选型定为 Vue 最新全家桶 + TypeScript。</p><p>那么问题来了，为什么大型项目非得用 TypeScript 呢，ES6、7 不行么？</p><div align="center"><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://user-gold-cdn.xitu.io/2018/7/22/164c239019ab71a9?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br></div><p>其实也没说不行，只不过我个人更倾向在一些协作开发的大型项目中使用 TypeScript 。下面我列一些我做完调研后自己的一些看法</p><ol><li>首先，TypeScript 具有类型系统，且是 JavaScript 的超集。 JavaScript 能做的，它能做。JavaScript 不能做的，它也能做。</li><li>其次，TypeScript 已经比较成熟了，市面上相关资料也比较多，大部分的库和框架也读对 TypeScript 做了很好的支持。</li><li>然后，保证优秀的前提下，它还在积极的开发完善之中，不断地会有新的特性加入进来</li><li>JavaScript 是弱类型并且没有命名空间，导致很难模块化，使得其在大型的协作项目中不是很方便</li><li>vscode、ws 等编辑器对 TypeScript 支持很友好</li><li>TypeScript 在组件以及业务的类型校验上支持比较好，比如</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// 定义枚举</span><br><span class="line">const enum StateEnum &#123;</span><br><span class="line">  TO_BE_DONE = 0,</span><br><span class="line">  DOING = 1,</span><br><span class="line">  DONE = 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 定义 item 接口</span><br><span class="line">interface SrvItem &#123;</span><br><span class="line">  val: string,</span><br><span class="line">  key: string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 定义服务接口</span><br><span class="line">interface SrvType &#123;</span><br><span class="line">  name: string,</span><br><span class="line">  key: string,</span><br><span class="line">  state?: StateEnum,</span><br><span class="line">  item: Array&lt;SrvItem&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 然后定义初始值（如果不按照类型来，报错肯定是避免不了的）</span><br><span class="line">const types: SrvType = &#123;</span><br><span class="line">  name: &apos;&apos;,</span><br><span class="line">  key: &apos;&apos;,</span><br><span class="line">  item: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                   
      
    
    </summary>
    
      <category term="前端" scheme="http://lipten.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="typescript" scheme="http://lipten.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>vue-slidePage 基于slidePage的vue插件版</title>
    <link href="http://lipten.github.io/2018/07/21/vue-slidePage-%E5%9F%BA%E4%BA%8EslidePage%E7%9A%84vue%E6%8F%92%E4%BB%B6%E7%89%88/"/>
    <id>http://lipten.github.io/2018/07/21/vue-slidePage-基于slidePage的vue插件版/</id>
    <published>2018-07-21T16:27:54.000Z</published>
    <updated>2018-08-03T11:01:12.668Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue-slidePage"><a href="#vue-slidePage" class="headerlink" title="vue-slidePage"></a>vue-slidePage</h1><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>vue-slidePage is a fullscreen scrolling component of Vue.js, Based on <a href="https://github.com/lipten/slidePage" target="_blank" rel="noopener">slidePage</a></p><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><ul><li><a href="http://lipten.link/projects/slidePage3/examples/simple.html" target="_blank" rel="noopener">simple</a></li><li><a href="http://lipten.link/projects/slidePage3/examples/custom.html" target="_blank" rel="noopener">custom</a></li></ul><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><h4 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -S vue-slidepage</span><br></pre></td></tr></table></figure><p>Work on a Vue instance:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">slide-container</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slide-page</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">slide-page</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">slide-container</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; SlideContainer, SlidePage &#125; <span class="keyword">from</span> <span class="string">'vue-slidePage'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue( &#123;</span><br><span class="line">  el: <span class="string">'body'</span>,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      list: [</span><br><span class="line">        &#123;<span class="attr">name</span>: <span class="string">'Page1'</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">name</span>: <span class="string">'Page2'</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">name</span>: <span class="string">'Page3'</span>&#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    SlideContainer,</span><br><span class="line">    SlidePage</span><br><span class="line">  &#125;</span><br><span class="line">&#125; )</span><br></pre></td></tr></table></figure><h2 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h2><p>SlideContainer:</p><table><br>  <thead><br>  <tr><br>    <th>name</th><br>    <th>type</th><br>    <th>default</th><br>    <th>description</th><br>  </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <td>useAnimation</td><br>      <td>Boolean</td><br>      <td>true</td><br>      <td>是否开启动画</td><br>    </tr><br>    <tr><br>      <td>refresh</td><br>      <td>Boolean</td><br>      <td>true</td><br>      <td>每次滚动进入是否重新执行动画</td><br>    </tr><br>    <tr><br>      <td>useWheel</td><br>      <td>Boolean</td><br>      <td>true</td><br>      <td>是否开启鼠标滚轮滑动</td><br>    </tr><br>    <tr><br>      <td>useSwipe</td><br>      <td>Boolean</td><br>      <td>true</td><br>      <td>是否开启移动端触控滑动</td><br>    </tr><br>  </tbody><br></table><h3 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h3><p>SlideContainer:</p><table><br>  <thead><br>  <tr><br>    <th>name</th><br>    <th>description</th><br>    <th>$event</th><br>  </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <td>before</td><br>      <td>每次全屏滚动前触发事件，回调三个参数(origin, direction, target)，分别是滚动前的page序号、方向(‘next’/‘prev’)、滚动后的page序号</td><br>      <td>$event.before</td><br>    </tr><br>    <tr><br>      <td>after</td><br>      <td>次全屏滚动后触发事件，回调三个参数(origin, direction, target)，参数释义同上</td><br>      <td>$event.after</td><br>    </tr><br>  </tbody><br></table><h2 id="Slots"><a href="#Slots" class="headerlink" title="Slots"></a>Slots</h2><p>SlidePage:</p><table><br>  <thead><br>  <tr><br>    <th>name</th><br>    <th>description</th><br>  </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <td>default</td><br>      <td>Page’s content</td><br>    </tr><br>  </tbody><br></table><p>usage:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">slide-container</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slide-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">slide-page</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">slide-container</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="License"><a href="#License" class="headerlink" title="License"></a>License</h1><p>MIT</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vue-slidePage&quot;&gt;&lt;a href=&quot;#vue-slidePage&quot; class=&quot;headerlink&quot; title=&quot;vue-slidePage&quot;&gt;&lt;/a&gt;vue-slidePage&lt;/h1&gt;&lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="前端" scheme="http://lipten.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="github" scheme="http://lipten.github.io/tags/github/"/>
    
      <category term="slidePage" scheme="http://lipten.github.io/tags/slidePage/"/>
    
  </entry>
  
  <entry>
    <title>slidePage-出react版本啦</title>
    <link href="http://lipten.github.io/2018/07/21/slidePage-%E5%87%BAreact%E7%89%88%E6%9C%AC%E5%95%A6/"/>
    <id>http://lipten.github.io/2018/07/21/slidePage-出react版本啦/</id>
    <published>2018-07-21T16:17:13.000Z</published>
    <updated>2018-08-03T11:01:12.664Z</updated>
    
    <content type="html"><![CDATA[<h1 id="react-slidePage"><a href="#react-slidePage" class="headerlink" title="react-slidePage"></a>react-slidePage</h1><p>这个react版本是依赖于slidePage的基础上用react实现的小插件，后续slidePage更新了，这个react-slidePage也会自动更新的哟。</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>react-slidePage is a fullscreen scrolling component of React, Based on <a href="https://github.com/lipten/slidePage" target="_blank" rel="noopener">slidePage</a></p><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><ul><li><a href="http://lipten.link/projects/slidePage3/examples/simple.html" target="_blank" rel="noopener">simple</a></li><li><a href="http://lipten.link/projects/slidePage3/examples/custom.html" target="_blank" rel="noopener">custom</a></li></ul><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><h4 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -S react-slidepage</span><br></pre></td></tr></table></figure><p>Work on a React instance:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; SlideContainer, SlidePage &#125; <span class="keyword">from</span> <span class="string">'react-slidePage'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      list: [</span><br><span class="line">        &#123;<span class="attr">name</span>: <span class="string">'Page1'</span>, <span class="attr">class</span>: <span class="string">'page1'</span>&#125;</span><br><span class="line">        &#123;<span class="attr">name</span>: <span class="string">'Page2'</span>, <span class="attr">class</span>: <span class="string">'page2'</span>&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;SlideContainer&gt;</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">this</span>.state.list.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">              &lt;SlidePage className=&#123;item.class&#125;&gt;</span><br><span class="line">                &#123;item.name&#125;</span><br><span class="line">              &lt;<span class="regexp">/SlidePage&gt;</span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">          &#125;)</span></span><br><span class="line"><span class="regexp">      &lt;/</span>SlideContainer&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h2><p>SlideContainer:</p><table><br>  <thead><br>  <tr><br>    <th>name</th><br>    <th>type</th><br>    <th>default</th><br>    <th>description</th><br>  </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <td>page</td><br>      <td>Number</td><br>      <td>1</td><br>      <td>初始页码</td><br>    </tr><br>    <tr><br>      <td>useAnimation</td><br>      <td>Boolean</td><br>      <td>true</td><br>      <td>是否开启动画</td><br>    </tr><br>    <tr><br>      <td>refresh</td><br>      <td>Boolean</td><br>      <td>true</td><br>      <td>每次滚动进入是否重新执行动画</td><br>    </tr><br>    <tr><br>      <td>useWheel</td><br>      <td>Boolean</td><br>      <td>true</td><br>      <td>是否开启鼠标滚轮滑动</td><br>    </tr><br>    <tr><br>      <td>useSwipe</td><br>      <td>Boolean</td><br>      <td>true</td><br>      <td>是否开启移动端触控滑动</td><br>    </tr><br>  </tbody><br></table><h3 id="Events-Props"><a href="#Events-Props" class="headerlink" title="Events Props"></a>Events Props</h3><p>SlideContainer:</p><table><br>  <thead><br>  <tr><br>    <th>name</th><br>    <th>description</th><br>  </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <td>before</td><br>      <td>每次全屏滚动前触发事件，回调三个参数(origin, direction, target)，分别是滚动前的page序号、方向(‘next’/‘prev’)、滚动后的page序号</td><br>    </tr><br>    <tr><br>      <td>after</td><br>      <td>次全屏滚动后触发事件，回调三个参数(origin, direction, target)，参数释义同上</td><br>    </tr><br>  </tbody><br></table><h1 id="License"><a href="#License" class="headerlink" title="License"></a>License</h1><p>MIT</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;react-slidePage&quot;&gt;&lt;a href=&quot;#react-slidePage&quot; class=&quot;headerlink&quot; title=&quot;react-slidePage&quot;&gt;&lt;/a&gt;react-slidePage&lt;/h1&gt;&lt;p&gt;这个react版本是依赖于slide
      
    
    </summary>
    
      <category term="前端" scheme="http://lipten.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="github" scheme="http://lipten.github.io/tags/github/"/>
    
      <category term="slidePage" scheme="http://lipten.github.io/tags/slidePage/"/>
    
  </entry>
  
  <entry>
    <title>Tiny-editor-可实时运行的代码编辑器</title>
    <link href="http://lipten.github.io/2018/07/21/Tiny-editor-%E5%8F%AF%E5%AE%9E%E6%97%B6%E8%BF%90%E8%A1%8C%E7%9A%84%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <id>http://lipten.github.io/2018/07/21/Tiny-editor-可实时运行的代码编辑器/</id>
    <published>2018-07-21T15:23:28.000Z</published>
    <updated>2018-08-03T11:01:12.656Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tiny-editor"><a href="#Tiny-editor" class="headerlink" title="Tiny-editor"></a>Tiny-editor</h1><p>Demo:<a href="http://lipten.link/demo/editor" target="_blank" rel="noopener">http://lipten.link/demo/editor</a></p><h3 id="update-v0-1"><a href="#update-v0-1" class="headerlink" title="-update v0.1-"></a>-update v0.1-</h3><p>1.测试版，目前有个别功能不稳定。</p><hr><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><h4 id="1、下载Tiny-editor"><a href="#1、下载Tiny-editor" class="headerlink" title="1、下载Tiny-editor"></a>1、下载Tiny-editor</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/lipten/Tiny-editor.git</span><br></pre></td></tr></table></figure><h4 id="2、引用相关文件"><a href="#2、引用相关文件" class="headerlink" title="2、引用相关文件"></a>2、引用相关文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;Tiny-editor.css&quot;/&gt;</span><br></pre></td></tr></table></figure><h4 id="3、引用js文件"><a href="#3、引用js文件" class="headerlink" title="3、引用js文件"></a>3、引用js文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;http://cdn.bootcss.com/ace/1.2.3/ace.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;Tiny-editor.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="4、html结构"><a href="#4、html结构" class="headerlink" title="4、html结构"></a>4、html结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//--html结构比较复杂，看下载后的editor.html比较完整</span><br></pre></td></tr></table></figure><h4 id="5、初始化代码"><a href="#5、初始化代码" class="headerlink" title="5、初始化代码"></a>5、初始化代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var Tiny = new TinyEditor()</span><br></pre></td></tr></table></figure><hr><h2 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h2><h4 id="Tiny-tab-num"><a href="#Tiny-tab-num" class="headerlink" title="Tiny.tab(num)"></a>Tiny.tab(num)</h4><p>tab显示第几个面板，num传序号，从1开始</p><h4 id="Tiny-run"><a href="#Tiny-run" class="headerlink" title="Tiny.run()"></a>Tiny.run()</h4><p>运行结果并跳到result面板</p><h4 id="Tiny-save"><a href="#Tiny-save" class="headerlink" title="Tiny.save()"></a>Tiny.save()</h4><p>保存代码至缓存</p><h4 id="Tiny-fullScreen"><a href="#Tiny-fullScreen" class="headerlink" title="Tiny.fullScreen()"></a>Tiny.fullScreen()</h4><p>全屏模式开启或关闭</p><h4 id="Tiny-dockMode"><a href="#Tiny-dockMode" class="headerlink" title="Tiny.dockMode()"></a>Tiny.dockMode()</h4><p>dock边栏模式开启或关闭</p><h4 id="Tiny-liveMode"><a href="#Tiny-liveMode" class="headerlink" title="Tiny.liveMode()"></a>Tiny.liveMode()</h4><p>实时运行模式，发生change事件时执行一次，仅开启dock模式的前提下才能开启</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Tiny-editor&quot;&gt;&lt;a href=&quot;#Tiny-editor&quot; class=&quot;headerlink&quot; title=&quot;Tiny-editor&quot;&gt;&lt;/a&gt;Tiny-editor&lt;/h1&gt;&lt;p&gt;Demo:&lt;a href=&quot;http://lipten.link/d
      
    
    </summary>
    
      <category term="前端" scheme="http://lipten.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Tiny-editor" scheme="http://lipten.github.io/tags/Tiny-editor/"/>
    
      <category term="github" scheme="http://lipten.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>slidePage-轻量灵活的全屏滚动插件</title>
    <link href="http://lipten.github.io/2018/07/21/slidePage-%E8%BD%BB%E9%87%8F%E7%81%B5%E6%B4%BB%E7%9A%84%E5%85%A8%E5%B1%8F%E6%BB%9A%E5%8A%A8%E6%8F%92%E4%BB%B6/"/>
    <id>http://lipten.github.io/2018/07/21/slidePage-轻量灵活的全屏滚动插件/</id>
    <published>2018-07-21T10:43:31.000Z</published>
    <updated>2018-08-03T11:01:12.668Z</updated>
    
    <content type="html"><![CDATA[<h1 id="slidePage"><a href="#slidePage" class="headerlink" title="slidePage"></a>slidePage</h1><blockquote><p>slidePage现已推出3.0, 吸取了上一版本<a href="https://github.com/lipten/slidePage/tree/v2" target="_blank" rel="noopener">slidePage v2.1.1</a> 的各种经验，弥补不足，与v2.1.1不同的是移除了对jquery和zepto的依赖，精简到只有一个js文件，优化了接口调用方式，更适合主流的前端框架，另外还有基于vue的插件版本<a href="https://github.com/lipten/vue-slidePage" target="_blank" rel="noopener">vue-slidePage</a>和基于react的插件版本<a href="https://github.com/lipten/react-slidePage" target="_blank" rel="noopener">react-slidePage</a></p></blockquote><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo:"></a>Demo:</h3><ul><li><a href="http://lipten.link/projects/slidePage3/examples/simple.html" target="_blank" rel="noopener">simple</a></li><li><a href="http://lipten.link/projects/slidePage3/examples/animated.html" target="_blank" rel="noopener">animated</a></li><li><a href="http://lipten.link/projects/slidePage3/examples/scroll.html" target="_blank" rel="noopener">scroll</a> </li><li><a href="http://lipten.link/projects/slidePage3/examples/custom.html" target="_blank" rel="noopener">custom</a> </li><li><a href="http://lipten.link/projects/slidePage3/examples/fullFeatured.html" target="_blank" rel="noopener">fullFeatured</a></li></ul><h3 id="Featured"><a href="#Featured" class="headerlink" title="Featured"></a>Featured</h3><p>slidePage3 特别适合主流前端框架开发，无任何依赖库，源代码只有12kb，Gzip压缩后仅有2.4k, 接口符合插件具有的初始化、销毁、重载的方法，适配PC和移动端，具有单屏内容滚动、手动播放动画、动态重绘等特色功能，具体查看完整示例: <a href="http://lipten.link/projects/slidePage3/examples/fullFeatured.html" target="_blank" rel="noopener">fullFeatured</a></p><h3 id="Documentation"><a href="#Documentation" class="headerlink" title="Documentation:"></a>Documentation:</h3><ul><li><a href="#usage">Usage</a><ul><li><a href="#install-slidepage">Install slidePage</a></li><li><a href="#including-files">Including files</a></li><li><a href="#required-html-structure">Required HTML structure</a></li><li><a href="#initialization">Initialization</a></li></ul></li><li><a href="#configuration">Configuration</a></li><li><a href="#options">Options</a></li><li><a href="#using-animation">Using Animation</a></li><li><a href="#methods">Methods</a><ul><li><a href="#slidepageslidenext">slidepage.slideNext()</a></li><li><a href="#slidepageslideprev">slidepage.slidePrev()</a></li><li><a href="#slidepageslidetopage">slidepage.slideTo(page)</a></li><li><a href="#slidepageslidefilepage">slidepage.slideFile(page)</a></li><li><a href="#slidepagedestroy">slidepage.destroy()</a></li><li><a href="#slidepageupdate">slidepage.update()</a></li></ul></li></ul><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><h3 id="Install-slidePage"><a href="#Install-slidePage" class="headerlink" title="Install slidePage"></a>Install slidePage</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// With npm</span><br><span class="line">npm install slidePage</span><br><span class="line"></span><br><span class="line">// With bower</span><br><span class="line">bower install slidePage</span><br></pre></td></tr></table></figure><h3 id="Including-files"><a href="#Including-files" class="headerlink" title="Including files"></a>Including files</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;slidePage.css&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;slidePage.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="Required-HTML-structure"><a href="#Required-HTML-structure" class="headerlink" title="Required HTML structure"></a>Required HTML structure</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;slide-container&quot; id=&quot;slide-container&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;slide-page page1&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">        &lt;h2&gt;page1&lt;/h2&gt;</span><br><span class="line">        &lt;p&gt;page1 content&lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;slide-page page2&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">        &lt;h2&gt;page2&lt;/h2&gt;</span><br><span class="line">        &lt;p&gt;page2 content&lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>您可以查看完整examples里的html文件结构 <a href="https://github.com/lipten/slidePage/blob/master/examples/fullFeatured.html" target="_blank" rel="noopener">fullFeatured.html</a></p><h3 id="Initialization"><a href="#Initialization" class="headerlink" title="Initialization"></a>Initialization</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new slidePage()</span><br></pre></td></tr></table></figure><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var slidepage = new slidePage(&#123;</span><br><span class="line">    slideContainer: &apos;#slide-container&apos;,</span><br><span class="line">    slidePages: &apos;.slide-item&apos;,</span><br><span class="line">    page: 1,</span><br><span class="line">    refresh: true,</span><br><span class="line">    useWheel: true,</span><br><span class="line">    useSwipe: true,</span><br><span class="line">    useAnimation : true,</span><br><span class="line"></span><br><span class="line">    // Events</span><br><span class="line">    before: function(origin,direction,target)&#123;&#125;,</span><br><span class="line">    after: function(origin,direction,target)&#123;&#125;,</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><h2 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h2><blockquote><p>在slidePage中，page指的是每一次全屏滚动的一屏，也可以理解为每一屏对应的页码，必须是1以上的整数</p></blockquote><table><br>  <thead><br>  <tr><br>    <th>name</th><br>    <th>type</th><br>    <th>default</th><br>    <th>description</th><br>  </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <td>slideContainer</td><br>      <td>String|Element</td><br>      <td>‘.slide-container’</td><br>      <td>指定slidePage要运行的容器选择器或元素</td><br>    </tr><br>    <tr><br>      <td>slidePages</td><br>      <td>String|NodeList|HTMLCollection</td><br>      <td>‘.slide-page’</td><br>      <td>指定<code>slideContainer</code>容器里每个page的选择器或元素</td><br>    </tr><br>    <tr><br>      <td>page</td><br>      <td>Number</td><br>      <td>1</td><br>      <td>首次进入的page页码</td><br>    </tr><br>    <tr><br>      <td>useAnimation</td><br>      <td>Boolean</td><br>      <td>true</td><br>      <td>是否开启动画</td><br>    </tr><br>    <tr><br>      <td>refresh</td><br>      <td>Boolean</td><br>      <td>true</td><br>      <td>每次滚动进入是否重新执行动画</td><br>    </tr><br>    <tr><br>      <td>useWheel</td><br>      <td>Boolean</td><br>      <td>true</td><br>      <td>是否开启鼠标滚轮滑动</td><br>    </tr><br>    <tr><br>      <td>useSwipe</td><br>      <td>Boolean</td><br>      <td>true</td><br>      <td>是否开启移动端触控滑动</td><br>    </tr><br>  </tbody><br></table><h2 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h2><table><br>  <thead><br>  <tr><br>    <th>name</th><br>    <th>description</th><br>  </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <td>before</td><br>      <td>每次全屏滚动前触发事件，回调三个参数(origin, direction, target)，分别是滚动前的page序号、方向(‘next’|’prev’)、滚动后的page序号</td><br>    </tr><br>    <tr><br>      <td>after</td><br>      <td>每次全屏滚动后触发事件，回调三个参数(origin, direction, target)，参数释义同上</td><br>    </tr><br>  </tbody><br></table><h2 id="Using-Animation"><a href="#Using-Animation" class="headerlink" title="Using Animation"></a>Using Animation</h2><blockquote><p>为了方便示例用animate.css，动画效果可以自己实现</p></blockquote><h3 id="Include-animate-css"><a href="#Include-animate-css" class="headerlink" title="Include animate.css"></a>Include animate.css</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/animate.css@3.5.2/animate.min.css&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="HTML-structure"><a href="#HTML-structure" class="headerlink" title="HTML structure"></a>HTML structure</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;step animated fadeIn&quot; data-delay=&quot;1300&quot;&gt;&lt;/div&gt;;</span><br></pre></td></tr></table></figure><p>在想要动画控制的元素上加上step类，并加上css动画类名即可使用动画，data-delay属性控制动画延时播放(默认为100毫秒);</p><h4 id="手动触发动画"><a href="#手动触发动画" class="headerlink" title="手动触发动画"></a>手动触发动画</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;lazy animated fadeIn&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><ol><li>在想要手动播放动画的元素上加上lazy类，并加上css动画类名即可使用动画，可以加上data-delay使触发时再延时播放;</li><li>通过slidepage.slideFire(page)指定某一页的lazy动画触发播放。</li></ol><h2 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h2><h3 id="slidepage-slideNext"><a href="#slidepage-slideNext" class="headerlink" title="slidepage.slideNext()"></a>slidepage.slideNext()</h3><p>滑动定位到下一屏</p><h3 id="slidepage-slidePrev"><a href="#slidepage-slidePrev" class="headerlink" title="slidepage.slidePrev()"></a>slidepage.slidePrev()</h3><p>滑动定位到上一屏</p><h3 id="slidepage-slideTo-page"><a href="#slidepage-slideTo-page" class="headerlink" title="slidepage.slideTo(page)"></a>slidepage.slideTo(page)</h3><p>传入page页码，滑动定位到对应的page</p><h3 id="slidepage-slideFile-page"><a href="#slidepage-slideFile-page" class="headerlink" title="slidepage.slideFile(page)"></a>slidepage.slideFile(page)</h3><p>触发对应 page 的lazy手动动画</p><h3 id="slidepage-destroy"><a href="#slidepage-destroy" class="headerlink" title="slidepage.destroy()"></a>slidepage.destroy()</h3><p>销毁当前实例，移除所有事件恢复class属性值。</p><h3 id="slidepage-update-newSlidePages"><a href="#slidepage-update-newSlidePages" class="headerlink" title="slidepage.update(newSlidePages)"></a>slidepage.update(newSlidePages)</h3><p>当html里的page发生变化时需要执行动态更新。</p><p><code>newSlidePages</code>参数非必填，仅应对于初始化的时候<code>slidePages</code>参数传入的是<code>NodeList</code>或<code>HTMLCollection</code>时才需要在更新的时候再传一次变化后的DOM结构通知更新。</p><p>&gt; 此方法非常适合现在流行的数据驱动型框架，当模型数据驱动改变pege的排列时，执行update可以起到更新的作用，可以先看示例源码了解：<a href="https://github.com/lipten/slidePage/blob/master/examples/custom.html" target="_blank" rel="noopener">custom.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;slidePage&quot;&gt;&lt;a href=&quot;#slidePage&quot; class=&quot;headerlink&quot; title=&quot;slidePage&quot;&gt;&lt;/a&gt;slidePage&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;slidePage现已推出3.0, 吸取了上一版本&lt;a h
      
    
    </summary>
    
      <category term="前端" scheme="http://lipten.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="github" scheme="http://lipten.github.io/tags/github/"/>
    
      <category term="slidePage" scheme="http://lipten.github.io/tags/slidePage/"/>
    
  </entry>
  
</feed>
