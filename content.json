{"meta":{"title":"lipten主页","subtitle":null,"description":null,"author":"lipten","url":"http://lipten.github.io"},"pages":[{"title":"categories","date":"2018-07-21T15:33:56.000Z","updated":"2018-08-03T11:01:12.708Z","comments":false,"path":"categories/index.html","permalink":"http://lipten.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-07-21T15:17:48.000Z","updated":"2018-08-03T11:01:12.712Z","comments":false,"path":"tags/index.html","permalink":"http://lipten.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"js将用户上传gif动图分解成多张帧图片","slug":"js将用户上传gif动图分解成多张帧图片","date":"2018-08-27T08:19:54.000Z","updated":"2018-08-27T09:13:18.763Z","comments":true,"path":"2018/08/27/js将用户上传gif动图分解成多张帧图片/","link":"","permalink":"http://lipten.github.io/2018/08/27/js将用户上传gif动图分解成多张帧图片/","excerpt":"","text":"js将用户上传gif动图分解成多张帧图片写在前面工作中遇到一个这么一个需求：这是一个多图上传的场景，如果用户上传选择多张图片，则上传后直接展示多张图片，如果上传的图片是gif动图，则需要分解这张动图拆分成一帧一帧的单张图片，再按顺序展示出来。 实现思路这里主要针对gif分解多图的实现 首先对用户上传的文件格式进行判断； 将gif动图经过 gif库 解析成gif实例 遍历获取gif实例的每一帧的canvas，转换成baseURL，再转一份file对象存放起来。 通过转换后的baseURL展示到界面，用户点上传就把对应的file对象上传服务器。 这里最核心的就是2，3步，非常庆幸有https://github.com/buzzfeed/libgif-js 这个库，才得以实现后面的步骤； 代码部分由于是公司项目就不展示界面和完整代码，只放关键代码： 0. 引入gif库1import &#123; SuperGif &#125; from &apos;./libgif.js&apos; 1. 对用户上传的文件格式进行判断12345678910111213141516171819202122232425262728293031323334// 判断文件格式并展示的函数pre_upload() &#123; // 点击上传按钮触发弹出文件选择框 const input = document.createElement('input'); input.setAttribute('type', 'file'); // 注意要设置多选属性 input.setAttribute('multiple', 'true'); input.addEventListener('change', (e) =&gt; &#123; this.img_list = []; this.can_upload = true; this.qiniu_url_list = []; // 判断是gif格式则交给this.pre_load_gif函数处理 if (/(image\\/gif)/.test(e.path[0].files[0].type)) &#123; this.pre_load_gif(e.path[0].files[0]) return; &#125; // 如果是上传多张静态的png、jpg图片则直接转换成baseURL var img_list = []; for(let i=0,item; item = e.path[0].files[i]; i++) &#123; if (!/(image\\/png)|(image\\/jp(e?)g)/.test(item.type)) &#123; alert('请上传jpg、png格式的图片') return; &#125; img_list.push(&#123; file_name: item.name, url: URL.createObjectURL(item), file: item, &#125;) &#125; this.img_list = img_list &#125;); input.click();&#125;, 2. 分解gif图片123456789101112131415161718192021222324252627282930313233343536373839dataURLtoFile(dataurl, filename) &#123; const arr = dataurl.split(','); const mime = arr[0].match(/:(.*?);/)[1]; const bstr = atob(arr[1]); var n = bstr.length; const u8arr = new Uint8Array(n); while (n--) &#123; u8arr[n] = bstr.charCodeAt(n); &#125; return new File([u8arr], filename, &#123;type:mime&#125;);&#125;,// 将canvas转换成file对象convertCanvasToImage(canvas, filename) &#123; return this.dataURLtoFile(canvas.toDataURL('image/png'), filename);&#125;,pre_load_gif(gif_source) &#123; var img_list = []; const gifImg = document.createElement('img'); // gif库需要img标签配置下面两个属性 gifImg.setAttribute('rel:animated_src', URL.createObjectURL(gif_source)) gifImg.setAttribute('rel:auto_play', '0') // 新建gif实例 var rub = new SuperGif(&#123; gif: gifImg &#125; ); rub.load(() =&gt; &#123; var img_list = []; for (let i=1; i &lt;= rub.get_length(); i++) &#123; // 遍历gif实例的每一帧 rub.move_to(i); // 将每一帧的canvas转换成file对象 let cur_file = this.convertCanvasToImage(rub.get_canvas(), gif_source.name.replace('.gif', '') + `-$&#123;i&#125;`) img_list.push(&#123; file_name: cur_file.name, url: URL.createObjectURL(cur_file), file: cur_file, &#125;) &#125; this.img_list = img_list &#125;);&#125;, 至此，核心功能基本实现，上面的函数已经将gif分解成多张图片存放在this.img_list 这个数组里面。 接下来只要拿img_list数组里的file对象上传到服务器即可。 上传方式各不相同，这里就不放具体代码了，需要注意的是，图片上传是异步操作，多图上传需要得知所有的图片全部上传成功才能确定上传完成，所以如果上传的函数返回的是promise对象，则可以直接用Promise.all函数即可得知所有图片上传完毕的回调。","categories":[],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://lipten.github.io/tags/javascript/"}]},{"title":"时隔两年，更新了一下下以前的教程网站。","slug":"时隔两年，更新了一下下以前的教程网站。","date":"2018-08-27T07:49:50.000Z","updated":"2018-08-27T07:51:38.702Z","comments":true,"path":"2018/08/27/时隔两年，更新了一下下以前的教程网站。/","link":"","permalink":"http://lipten.github.io/2018/08/27/时隔两年，更新了一下下以前的教程网站。/","excerpt":"","text":"写在前面以前脑袋一热做的教程网站 https://www.v2ex.com/t/275010#reply63 更新内容： 这次用 vue 框架结合Tiny-editor做个简单的编辑器，仿造 jsbin，还自己实现了 console 面板; 再把之前的教程网站放进来，加个编辑器的入口。 之前的多说评论插件挂了，貌似现在国内的免费评论插件基本挂了，换成了来必力的评论插件，需要翻墙额。 体验编辑器可以进入 http://www.codeasily.net/editor 有话想说回顾两年前的那篇帖子，以前那个时候学习前端的教程资源和对前端的认知比较守旧👨‍🌾‍，所以自己写教程👨‍💻‍，当时还有很多评论说做的挺好希望出多点教程，可惜毕业后一直忙于工作而且写教程消耗大量时间精力，就一直搁着了，非常感谢当时鼓励我的小伙伴👏。 现在翻看慕课网的一些课程，确实与时俱进多了一些前端真正该学的东西并且能提高行业竞争力的教程📚，出来工作 2 年认识的前端开发人员的整体姿势水平都提高了📈，也包括我自己😌。 这次做的这个编辑器只是为了完善两年前写的丑丑的 demo，改善一下界面和体验，还有今年写了个 web 端的 console 组件，用来填补这个编辑器的一个功能，也当做学习了。 我做这个编辑器不为发展成主业或者明星产品，市面上功能更强大的编辑器有很多，只是我喜欢动手体验学习，即使是轮子，只要能给我带来提升，都值得一试☝️ 我是一个喜欢实践代替看教程的人，即使做的不怎么样，自己心里觉得满足就够了👌","categories":[],"tags":[{"name":"分享创造","slug":"分享创造","permalink":"http://lipten.github.io/tags/分享创造/"}]},{"title":"TypeScript + 大型项目实战","slug":"TypeScript-大型项目实战","date":"2018-07-24T06:06:28.000Z","updated":"2018-08-03T11:01:12.664Z","comments":true,"path":"2018/07/24/TypeScript-大型项目实战/","link":"","permalink":"http://lipten.github.io/2018/07/24/TypeScript-大型项目实战/","excerpt":"","text":"转载地址：https://juejin.im/post/5b54886ce51d45198f5c75d7 TypeScript + 大型项目实战写在前面 TypeScript 已经出来很久了，很多大公司很多大项目也都在使用它进行开发。上个月，我这边也正式跟进一个对集团的大型运维类项目。 项目要做的事情大致分为以下几个大模块 一站式管理平台 规模化运维能力 预案平台 巡检平台 全链路压测等 每一个模块要做的事情也很多，由于牵扯到公司业务，具体要做的一些事情这里我就不一一列举了，反正项目整体规模还是很大的。 一、关于选型在做了一些技术调研后，再结合项目之后的开发量级以及维护成本。最终我和同事在技术选型上得出一致结论，最终选型定为 Vue 最新全家桶 + TypeScript。 那么问题来了，为什么大型项目非得用 TypeScript 呢，ES6、7 不行么？ 其实也没说不行，只不过我个人更倾向在一些协作开发的大型项目中使用 TypeScript 。下面我列一些我做完调研后自己的一些看法 首先，TypeScript 具有类型系统，且是 JavaScript 的超集。 JavaScript 能做的，它能做。JavaScript 不能做的，它也能做。 其次，TypeScript 已经比较成熟了，市面上相关资料也比较多，大部分的库和框架也读对 TypeScript 做了很好的支持。 然后，保证优秀的前提下，它还在积极的开发完善之中，不断地会有新的特性加入进来 JavaScript 是弱类型并且没有命名空间，导致很难模块化，使得其在大型的协作项目中不是很方便 vscode、ws 等编辑器对 TypeScript 支持很友好 TypeScript 在组件以及业务的类型校验上支持比较好，比如 123456789101112131415161718192021222324252627// 定义枚举const enum StateEnum &#123; TO_BE_DONE = 0, DOING = 1, DONE = 2&#125;// 定义 item 接口interface SrvItem &#123; val: string, key: string&#125;// 定义服务接口interface SrvType &#123; name: string, key: string, state?: StateEnum, item: Array&lt;SrvItem&gt;&#125;// 然后定义初始值（如果不按照类型来，报错肯定是避免不了的）const types: SrvType = &#123; name: &apos;&apos;, key: &apos;&apos;, item: []&#125;","categories":[{"name":"前端","slug":"前端","permalink":"http://lipten.github.io/categories/前端/"}],"tags":[{"name":"typescript","slug":"typescript","permalink":"http://lipten.github.io/tags/typescript/"}]},{"title":"vue-slidePage 基于slidePage的vue插件版","slug":"vue-slidePage-基于slidePage的vue插件版","date":"2018-07-21T16:27:54.000Z","updated":"2018-08-03T11:01:12.668Z","comments":true,"path":"2018/07/21/vue-slidePage-基于slidePage的vue插件版/","link":"","permalink":"http://lipten.github.io/2018/07/21/vue-slidePage-基于slidePage的vue插件版/","excerpt":"","text":"vue-slidePageIntroductionvue-slidePage is a fullscreen scrolling component of Vue.js, Based on slidePage Demo simple custom UsageInstall1$ npm i -S vue-slidepage Work on a Vue instance: 12345&lt;slide-container&gt; &lt;slide-page v-for=\"(item, index) in list\"&gt; &lt;h2&gt;&#123;&#123;item.name&#125;&#125;&lt;/h2&gt; &lt;/slide-page&gt;&lt;/slide-container&gt; 123456789101112131415161718import &#123; SlideContainer, SlidePage &#125; from 'vue-slidePage'new Vue( &#123; el: 'body', data () &#123; return &#123; list: [ &#123;name: 'Page1'&#125;, &#123;name: 'Page2'&#125;, &#123;name: 'Page3'&#125;, ], &#125; &#125;, components: &#123; SlideContainer, SlidePage &#125;&#125; ) PropsSlideContainer: name type default description useAnimation Boolean true 是否开启动画 refresh Boolean true 每次滚动进入是否重新执行动画 useWheel Boolean true 是否开启鼠标滚轮滑动 useSwipe Boolean true 是否开启移动端触控滑动 EventsSlideContainer: name description $event before 每次\b\b全屏滚动前触发事件，\b回调三个参数(origin, direction, target)，分别是滚动前的page序号、方向(‘next’/‘prev’)、滚动后的page序号 $event.before after 次\b\b全屏滚动后触发事件，\b回调三个参数(origin, direction, target)，参数释义同上 $event.after SlotsSlidePage: name description default Page’s content usage:1234567&lt;slide-container&gt; &lt;slide-page&gt; &lt;img src=\"\"&gt; &lt;p&gt;&lt;/p&gt; &lt;button&gt;&lt;/button&gt; &lt;/slide-page&gt;&lt;/slide-container&gt; LicenseMIT","categories":[{"name":"前端","slug":"前端","permalink":"http://lipten.github.io/categories/前端/"}],"tags":[{"name":"github","slug":"github","permalink":"http://lipten.github.io/tags/github/"},{"name":"slidePage","slug":"slidePage","permalink":"http://lipten.github.io/tags/slidePage/"}]},{"title":"slidePage-出react版本啦","slug":"slidePage-出react版本啦","date":"2018-07-21T16:17:13.000Z","updated":"2018-08-03T11:01:12.664Z","comments":true,"path":"2018/07/21/slidePage-出react版本啦/","link":"","permalink":"http://lipten.github.io/2018/07/21/slidePage-出react版本啦/","excerpt":"","text":"react-slidePage这个react版本是依赖于slidePage的基础上用react实现的小插件，后续slidePage更新了，这个react-slidePage也会自动更新的哟。 Introductionreact-slidePage is a fullscreen scrolling component of React, Based on slidePage Demo simple custom UsageInstall1$ npm i -S react-slidepage Work on a React instance: 123456789101112131415161718192021222324252627import &#123; SlideContainer, SlidePage &#125; from 'react-slidePage'class App extends React.Component &#123; constructor(props) &#123; super(props); this.state = &#123; list: [ &#123;name: 'Page1', class: 'page1'&#125; &#123;name: 'Page2', class: 'page2'&#125; ] &#125; &#125; render() &#123; return ( &lt;SlideContainer&gt; &#123; this.state.list.map((item, index) =&gt; &#123; return ( &lt;SlidePage className=&#123;item.class&#125;&gt; &#123;item.name&#125; &lt;/SlidePage&gt; ) &#125;) &lt;/SlideContainer&gt; ) &#125;&#125; PropsSlideContainer: name type default description page Number 1 初始页码 useAnimation Boolean true 是否开启动画 refresh Boolean true 每次滚动进入是否重新执行动画 useWheel Boolean true 是否开启鼠标滚轮滑动 useSwipe Boolean true 是否开启移动端触控滑动 Events PropsSlideContainer: name description before 每次\b\b全屏滚动前触发事件，\b回调三个参数(origin, direction, target)，分别是滚动前的page序号、方向(‘next’/‘prev’)、滚动后的page序号 after 次\b\b全屏滚动后触发事件，\b回调三个参数(origin, direction, target)，参数释义同上 LicenseMIT","categories":[{"name":"前端","slug":"前端","permalink":"http://lipten.github.io/categories/前端/"}],"tags":[{"name":"github","slug":"github","permalink":"http://lipten.github.io/tags/github/"},{"name":"slidePage","slug":"slidePage","permalink":"http://lipten.github.io/tags/slidePage/"}]},{"title":"Tiny-editor-可实时运行的代码编辑器","slug":"Tiny-editor-可实时运行的代码编辑器","date":"2018-07-21T15:23:28.000Z","updated":"2018-08-03T11:01:12.656Z","comments":true,"path":"2018/07/21/Tiny-editor-可实时运行的代码编辑器/","link":"","permalink":"http://lipten.github.io/2018/07/21/Tiny-editor-可实时运行的代码编辑器/","excerpt":"","text":"Tiny-editorDemo:http://lipten.link/demo/editor -update v0.1-1.测试版，目前有个别功能不稳定。 Usage1、下载Tiny-editor1git clone https://github.com/lipten/Tiny-editor.git 2、引用相关文件1&lt;link rel=&quot;stylesheet&quot; href=&quot;Tiny-editor.css&quot;/&gt; 3、引用js文件12&lt;script src=&quot;http://cdn.bootcss.com/ace/1.2.3/ace.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;Tiny-editor.js&quot;&gt;&lt;/script&gt; 4、html结构1//--html结构比较复杂，看下载后的editor.html比较完整 5、初始化代码1var Tiny = new TinyEditor() MethodTiny.tab(num)tab显示第几个面板，num传序号，从1开始 Tiny.run()运行结果并跳到result面板 Tiny.save()保存代码至缓存 Tiny.fullScreen()全屏模式开启或关闭 Tiny.dockMode()dock边栏模式开启或关闭 Tiny.liveMode()实时运行模式，发生change事件时执行一次，仅开启dock模式的前提下才能开启","categories":[{"name":"前端","slug":"前端","permalink":"http://lipten.github.io/categories/前端/"}],"tags":[{"name":"Tiny-editor","slug":"Tiny-editor","permalink":"http://lipten.github.io/tags/Tiny-editor/"},{"name":"github","slug":"github","permalink":"http://lipten.github.io/tags/github/"}]},{"title":"slidePage-轻量灵活的全屏滚动插件","slug":"slidePage-轻量灵活的全屏滚动插件","date":"2018-07-21T10:43:31.000Z","updated":"2018-08-03T11:01:12.668Z","comments":true,"path":"2018/07/21/slidePage-轻量灵活的全屏滚动插件/","link":"","permalink":"http://lipten.github.io/2018/07/21/slidePage-轻量灵活的全屏滚动插件/","excerpt":"","text":"slidePage slidePage现已推出3.0, 吸取了上一版本slidePage v2.1.1 的各种经验，弥补不足，与v2.1.1不同的是移除了对jquery和zepto的依赖，精简到只有一个js文件，优化了接口调用方式，更适合主流的前端框架，另外还有基于vue的插件版本vue-slidePage和基于react的插件版本react-slidePage Demo: simple animated scroll custom fullFeatured FeaturedslidePage3 特别适合主流前端框架开发，无任何依赖库，源代码只有12kb，Gzip\b压缩后仅有2.4k, 接口符合插件具有的初始化、销毁、重载的方法，\b适配PC和移动端，具有单屏内容滚动、手动播放动画、动态重绘等特色功能，具体查看完整示例: fullFeatured Documentation: Usage Install slidePage Including files Required HTML structure Initialization Configuration Options Using Animation Methods slidepage.slideNext() slidepage.slidePrev() slidepage.slideTo(page) slidepage.slideFile(page) slidepage.destroy() slidepage.update() UsageInstall slidePage12345// With npmnpm install slidePage// With bowerbower install slidePage Including files123&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;slidePage.css&quot;&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;slidePage.js&quot;&gt;&lt;/script&gt; Required HTML structure1234567891011121314&lt;div class=&quot;slide-container&quot; id=&quot;slide-container&quot;&gt; &lt;div class=&quot;slide-page page1&quot;&gt; &lt;div class=&quot;container&quot;&gt; &lt;h2&gt;page1&lt;/h2&gt; &lt;p&gt;page1 content&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;slide-page page2&quot;&gt; &lt;div class=&quot;container&quot;&gt; &lt;h2&gt;page2&lt;/h2&gt; &lt;p&gt;page2 content&lt;/p&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 您可以查看完整examples里的html文件结构 fullFeatured.html Initialization1new slidePage() Configuration12345678910111213var slidepage = new slidePage(&#123; slideContainer: &apos;#slide-container&apos;, slidePages: &apos;.slide-item&apos;, page: 1, refresh: true, useWheel: true, useSwipe: true, useAnimation : true, // Events before: function(origin,direction,target)&#123;&#125;, after: function(origin,direction,target)&#123;&#125;, &#125;); Options 在slidePage中，page指的是每一次全屏滚动的一屏，也可以理解为每一屏对应的页码，必须是1以上的整数 name type default description slideContainer String|Element ‘.slide-container’ 指定slidePage要运行的容器选择器或元素 slide\bPages String|NodeList|HTMLCollection ‘.slide-page’ 指定slideContainer容器里每个page的选择器或元素 page Number 1 首次进入的page页码 useAnimation Boolean true 是否开启动画 refresh Boolean true 每次滚动进入是否重新执行动画 useWheel Boolean true 是否开启鼠标滚轮滑动 useSwipe Boolean true 是否开启移动端触控滑动 Events name description before 每次\b\b全屏滚动前触发事件，\b回调三个参数(origin, direction, target)，分别是滚动前的page序号、方向(‘next’|’prev’)、滚动后的page序号 after 每次\b\b全屏滚动后触发事件，\b回调三个参数(origin, direction, target)，参数释义同上 Using Animation 为了方便示例用animate.css，动画效果可以自己实现 Include animate.css1&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/animate.css@3.5.2/animate.min.css&quot;&gt; HTML structure1&lt;div class=&quot;step animated fadeIn&quot; data-delay=&quot;1300&quot;&gt;&lt;/div&gt;; 在想要动画控制的元素上加上step类，并加上css动画类名即可使用动画，data-delay属性控制动画延时播放(默认为100毫秒); 手动触发动画1&lt;div class=&quot;lazy animated fadeIn&quot;&gt;&lt;/div&gt; 在想要手动播放动画的元素上加上lazy类，并加上css动画类名即可使用动画，可以加上data-delay使触发时再延时播放; 通过slidepage.slideFire(page)指定某一页的lazy动画触发播放。 Methodsslidepage.slideNext()滑动定位到下一屏 slidepage.slidePrev()滑动定位到上一屏 slidepage.slideTo(page)传入page页码，滑动定位到对应的page slidepage.slideFile(page)触发对应 \bpage 的lazy手动动画 slidepage.destroy()销毁当前实例，移除\b所有事件\b恢复class属性值。 slidepage.update(newSlidePages)当html里的page发生变化时需要执行动态更新。 newSlidePages参数非必填，仅应对于初始化的时候slidePages参数传入的是\bNodeList或HTMLCollection时\b才需要在更新的时候再传一次变化后的DOM结构通知更新。 \b&gt; 此方法非常适合现在流行的数据驱动型框架，当模型数据驱动改变pege的排列时，执行update可以起到更新的作用，可以先看示例源码了解：custom.html","categories":[{"name":"前端","slug":"前端","permalink":"http://lipten.github.io/categories/前端/"}],"tags":[{"name":"github","slug":"github","permalink":"http://lipten.github.io/tags/github/"},{"name":"slidePage","slug":"slidePage","permalink":"http://lipten.github.io/tags/slidePage/"}]}]}