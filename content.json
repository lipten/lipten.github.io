{"meta":{"title":"lipten主页","subtitle":null,"description":null,"author":"lipten","url":"http://lipten.github.io"},"pages":[{"title":"categories","date":"2018-07-21T15:33:56.000Z","updated":"2018-08-03T11:01:12.708Z","comments":false,"path":"categories/index.html","permalink":"http://lipten.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-07-21T15:17:48.000Z","updated":"2018-08-03T11:01:12.712Z","comments":false,"path":"tags/index.html","permalink":"http://lipten.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"单页应用SPA做SEO的一种清奇的方案","slug":"单页应用SPA做SEO的一种清奇的方案","date":"2018-09-08T06:46:24.000Z","updated":"2018-09-08T08:57:08.174Z","comments":true,"path":"2018/09/08/单页应用SPA做SEO的一种清奇的方案/","link":"","permalink":"http://lipten.github.io/2018/09/08/单页应用SPA做SEO的一种清奇的方案/","excerpt":"","text":"网上有好几种单页应用转seo的方案，有服务端渲染ssr、有预渲染prerender、google抓AJAX、静态化。。。这些方案都各有优劣，开发者可以根据不同的业务场景和环境决定用哪一种方案。本文将介绍另一种思路比较清奇的SEO方案，这个方案也是有优有劣，就看读者觉得适不适合了。 项目分析我的项目是用react+ts+dva技术栈搭建的单页应用，目前在线上已经有几十个页面，若干个sdk和插件在里面。 考虑想用服务端渲染来做seo，但是我的项目已经开发了这么多，打包配置、代码分割、语法兼容、摒弃浏览器对象，服务端思想，这么多的点需要考虑，还不如换个框架重新开发呢，所以改造成本太大😱，服务端渲染不适合我这种情况。 预渲染虽然是开发成本最低的，但毕竟是生成一张一张的静态html，而我的seo需求是能够让蜘蛛抓取到我的社区论坛下的每一篇帖子，这样子下来一篇帖子就是一份html,再加上分页，那得多大的量级来存储啊😰，而且网站更新就更麻烦了，这个方案也不太适合。 google…..Emmmm…………………….下一个 静态化也是跟预渲染差不多。。。 隆重介绍以前写过一种单页应用seo的方案，就是自己先在本地用爬虫做预渲染，生成同样目录结构的静态化的html，前端项目服务器判断请求的UA是搜索引擎蜘蛛的话就会转发到我事先静态化过的html页面 当时的项目只是一个简单的只有几个页面的企业官网，预渲染没啥问题。 跟着这个思路，只要判断搜索引擎蜘蛛让蜘蛛看到另一个有数据的页面不就行了。 至于页面长什么样，蜘蛛🕷才不会管呢，就像是你找广告商投放广告，广告商不会要求你要怎样的主题什么色调，只要你按照他的尺寸和要求来做，然后给钱给货就完事了🤑。 所以可以针对SEO做另一套网站，没有样式，只有符合seo规范的html标签和对应的数据，不需要在原有项目上改造，开发成本也不会很高，体积小加载速度更快。 缺点也有，就是需要另外维护一套网站，主网站界面变化不会影响，如果展示数据有变化就需要同步修改seo版的网站。 代码实现先建个单独的seo文件夹，不需要动到原有项目，下面是代码结构： 代码实现非常之简单，只要写一个中间件拦截请求，鉴别蜘蛛，返回对应路径的seo页面即可。 我的前端服务器是用express，可以写个express的中间件, 新建server.js： 12345678910111213141516171819202122232425// seo/server.jsconst routes = require(&apos;./routes&apos;)const layout_render = require(&apos;./src/layout&apos;);module.exports = (req, res, next) =&gt; &#123; // 各大搜索引擎蜘蛛UA const spiderUA = /Baiduspider|bingbot|Googlebot|360spider|Sogou|Yahoo! Slurp/ var isSpider = spiderUA.test(req.get(&apos;user-agent&apos;)) // 获取路由表的路径 var seoPath = Object.keys(routes) if (isSpider) &#123; for (let i=0,route; route = seoPath[i]; i++) &#123; if (new RegExp(route).test(req.path)) &#123; routes[route](req).then((result) =&gt; &#123; // 返回对应的模板结果给蜘蛛 res.set(&#123;&apos;Content-Type&apos;: &apos;text/html&apos;,&apos;charset&apos;: &apos;utf-8mb4&apos;&#125;).status(200).send(layout_render(result)) &#125;) break; &#125; &#125; &#125; else &#123; // 未匹配到蜘蛛则继续后面的中间件 return next() &#125;&#125; 然后在前端的启动服务器里加入这个中间件，记得要放在其他中间件之前 12345678// 前端启动服务器的server文件var express = require('express')var app = express()// seoapp.use(require('seo/server'));......app.listen(xxxx) 接下来就是写模板和对应的解析了, 新建一个home文件夹，文件夹下再建一个index.ejs和index.js 1234567&lt;!-- seo/src/home/index.ejs --&gt;&lt;div&gt; &lt;h1&gt;官网首页&lt;/h1&gt; &lt;p&gt;友情链接：&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://www.baidu.com/&quot; target=&quot;_blank&quot;&gt;百度&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://www.gogole.com/&quot; target=&quot;_blank&quot;&gt;谷歌&lt;/a&gt;&lt;/p&gt;&lt;/div&gt; index.js用于解析对应的ejs模板1234567891011// seo/src/home/index.jsconst ejs = require('ejs')const fs = require('fs')const path = require('path')const template = fs.readFileSync(path.resolve(__dirname, './index.ejs'), 'utf8');// 这里为什么会有个async关键字，往后面看就可以知道。module.exports = async (req) =&gt; &#123; const result = ejs.render(template) return result&#125; 我们还可以建多个layout模板来管理head、title和导航栏这些公有的元素 12345678910111213141516171819202122&lt;!-- seo/layout.ejs --&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;meta name=”renderer” content=”webkit”&gt; &lt;meta content=\"网站关键字\"\" name=\"keywords\"/&gt; &lt;meta content=\"网站描述\" name=\"description\"/&gt; &lt;title&gt;网站标题&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"root\"&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=\"/\"&gt;首页&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"/community\"&gt;社区&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;%- children -%&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 解析layout.ejs，套入内容的layout_render:12345678910// seo/layout.jsconst ejs = require('ejs')const fs = require('fs')const path = require('path')const template = fs.readFileSync(path.resolve(__dirname, './layout.ejs'), 'utf8');const layout_render = (children) =&gt; &#123; return ejs.render(template, &#123;children: children&#125;)&#125;module.exports = layout_render 路由表用简单的键值对就可以了，键名用字符串形式的正则来表示路径的匹配规则：123456// seo/routes.jsconst home_route = require('./src/home/index')module.exports = &#123; '^(/?)$': home_route,&#125; 那么数据如何做请求并展示到对应的模板内呢？数据请求是异步的，怎样等到请求完成再渲染模板呢？ 我们可以用async/await来实现，现在来做一个社区的帖子列表页面，需要先请求社区下帖子列表数据再把数据渲染到模板，新建一个community文件夹，同样再建一个index.ejs作为帖子列表页面模板：123456789&lt;!-- seo/src/community/index.ejs --&gt;&lt;div&gt; &lt;h1&gt;帖子列表&lt;/h1&gt; &lt;ul&gt; &lt;% forum_list.map((item) =&gt; &#123; %&gt; &lt;li&gt;&lt;a href=&quot;/community/&lt;%= item.id%&gt;&quot; target=&quot;_blank&quot;&gt;&lt;%= item.title-%&gt;&lt;/a&gt;&lt;/li&gt; &lt;% &#125;)%&gt; &lt;/ul&gt;&lt;/div&gt; 相关的接口请求及数据操作写在同级的index.js：123456789101112// seo/src/community/index.jsconst ejs = require('ejs')const fs = require('fs')const path = require('path')const template = fs.readFileSync(path.resolve(__dirname, './index.ejs'), 'utf8');const axios = require('axios');module.exports = async (req) =&gt; &#123; const res = await axios.get('http://xxx.xx/api/community/list') const result = ejs.render(template, &#123;forum_list: res.data.list&#125;) return result&#125; 这样就实现了先取接口数据再做渲染，保证了蜘蛛访问能给到完整的数据和html结构。 继续实现一个帖子详情的页面：123456&lt;!-- seo/src/community_detail/index.ejs --&gt;&lt;div&gt; &lt;h1&gt;&lt;%= forum_data.title%&gt;&lt;/h1&gt; &lt;p&gt;&lt;%= forum_data.content%&gt;&lt;/p&gt; &lt;p&gt;作者：&lt;%= forum_data.user.nickname%&gt;&lt;/p&gt;&lt;/div&gt; 12345678910111213// seo/src/community_detail/index.jsconst ejs = require('ejs')const fs = require('fs')const path = require('path')const template = fs.readFileSync(path.resolve(__dirname, './index.ejs'), 'utf8');const axios = require('axios');module.exports = async (req) =&gt; &#123; const forum_id = req.path.split('/')[2] const res = await axios.get(`http://xxx.xx/api/community/$&#123;forum_id&#125;/details?offset=1&amp;limit=10`) const result = ejs.render(template, &#123;forum_data: res.data&#125;) return result&#125; 这样就实现了一个简单的seo版网站，不需要任何样式，不需要js做弹框之类的后续交互，只要蜘蛛访问网址的第一个请求有它要的数据即可，是不是非常的清奇😝。。。 总结来说呢，就是如果你的项目处在线上运营阶段并且开发到了一定的集成度了，迫于ssr的改造成本太大，又需要让一些数据(比如每一篇文章帖子)能够被收录，就可以考虑一下我的这个方法🤓。 但是我不保证蜘蛛的防作弊机制，会不会过滤掉我这种跟浏览器正常访问主站差异较大的seo版小网站🤔。目前这个方案还在试验阶段。 测试测试也很简单，写个模拟蜘蛛请求即可，curl、爬虫、postman都可以模拟蜘蛛的UA来测试。或者改一下搜索引擎蜘蛛的的判断条件就可以直接用浏览器访问的呢。 如果有朋友用了我这个方法并且真的有用能够被搜索引擎收录的话，请记得我😎，要是能打赏就更好了哈哈🤑。","categories":[],"tags":[{"name":"web前端","slug":"web前端","permalink":"http://lipten.github.io/tags/web前端/"},{"name":"seo","slug":"seo","permalink":"http://lipten.github.io/tags/seo/"},{"name":"node.js","slug":"node-js","permalink":"http://lipten.github.io/tags/node-js/"}]},{"title":"记前端项目首屏加载优化(打包篇)","slug":"记前端项目首屏加载优化（打包篇）","date":"2018-09-05T02:27:05.000Z","updated":"2018-09-05T06:19:33.276Z","comments":true,"path":"2018/09/05/记前端项目首屏加载优化（打包篇）/","link":"","permalink":"http://lipten.github.io/2018/09/05/记前端项目首屏加载优化（打包篇）/","excerpt":"","text":"记前端项目首屏加载优化（打包篇） 看了一下我司官网的webpack打包出来的大小情况，发现有很多可以优化的点，比如 lodash、moment.js、antd等等；本文主要围绕webpack的打包优化，并根据业务情况适当的做减法。 优化前分析优化前一定要有一个界面能记录目前的打包情况，推荐用webpack-bundle-analyzer这个包, 它可以看到打包后每个模块的大小，还能给出gizp压缩后的大小，在生产环境中加载的模块都是经过gzip压缩过的，可以作为真实访问的大小依据。安装也很简单：1234567891011// clinpm install --save-dev webpack-bundle-analyzer// webpack.config.jsconst BundleAnalyzerPlugin = require(&apos;webpack-bundle-analyzer&apos;).BundleAnalyzerPlugin; module.exports = &#123; plugins: [ new BundleAnalyzerPlugin() ]&#125; 注意生产环境(production)是代表线上真实的环境，所以analyzer要对生产环境的包进行分析的，所以我配置了一下本地打包生产环境的构建配置，在package.json加入下面的配置:1234&quot;scripts&quot;: &#123; ... &quot;local_production&quot;: &quot;cross-env NODE_ENV=local_production npm run build&quot;&#125; 然后在webpack配置里面判断process.env.NODE_ENV === &#39;local_production&#39;，构建production环境的构建并且加入analyzer分析生产环境打包出来的情况。 这里是我的项目用analyzer生成出来的包大小情况（打包前） 主要看index.xxxx.js，它包含了所有的公共依赖，我们要做的就是减少不必要的公共资源的体积，可以减少大量不必要的代码。 逐个击破分析antd从上面的可以看出来antd.less占了很大部分面积，因为我要在项目中自定义theme，但是官方的那套配置的形式来自定义theme只能修改变量，不能改组件，所以我先加载所有的antd.less再在后面接着加载一个theme.less用于修改主题变量和修改antd组件样式。 可能是我当时搭项目的时候想太多了，由于是官网项目，所有的组件都是根据ui来自己写的，很少用到antd的组件，项目开发了几十个页面了也没有用到这种自定义组件的情况，所以其实可以不加载这个庞大的antd.less，然后antd按需加载是必须的。 后来发现我项目中用到的antd组件只有两个（轮播和单选框），其实轮播是可以用react-slick替代的，而单选框更是可以自己实现的，所以大胆的直接把antd给移除掉了，用其他插件替代即可。 移除了antd之后index包小了三百多k，这还远远不够，接着看下面的优化点 优化lodashlodash也是需要优化按需加载的方式的，推荐这篇教程Webpack按需打包Lodash的几种方式, 按照教程改进后，lodash 小了500多k。 优化moment其实moment引进来的时候会带有很多语言包的，我们只用到了其中一个中文的包，所以其他语言包都可以去掉，123plugins: [ new webpack.ContextReplacementPlugin(/moment[\\/\\\\]locale$/, /zh-cn/),] 后来又发现项目中只用到了moment().format()这个方法，由于moment.js只有一个大的moment.js模块，没有按模块分开写，无法按需打包，那么其实我们可以自己实现个简易版的moment来替代moment.js，下面是我找到的实现简易版moment代码:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576// 简易版moment代替moment.jsclass Moment &#123; private date:Date; constructor(arg = new Date().getTime()) &#123; this.date = new Date(arg); &#125; padStart(num) &#123; num = String(num); if (num.length &lt; 2) &#123; return &apos;0&apos; + num; &#125; else &#123; return num; &#125; &#125; unix() &#123; return Math.round(this.date.getTime() / 1000); &#125; static unix(timestamp) &#123; return new Moment(timestamp * 1000); &#125; format(formatStr) &#123; const date = this.date; const year = date.getFullYear(); const month = date.getMonth() + 1; const day = date.getDate(); const week = date.getDay(); const hour = date.getHours(); const minute = date.getMinutes(); const second = date.getSeconds(); const weeks = [&apos;一&apos;, &apos;二&apos;, &apos;三&apos;, &apos;四&apos;, &apos;五&apos;, &apos;六&apos;, &apos;日&apos;]; return formatStr.replace(/Y&#123;2,4&#125;|M&#123;1,2&#125;|D&#123;1,2&#125;|d&#123;1,4&#125;|h&#123;1,2&#125;|m&#123;1,2&#125;|s&#123;1,2&#125;/g, (match) =&gt; &#123; switch (match) &#123; case &apos;YY&apos;: return String(year).slice(-2); case &apos;YYY&apos;: case &apos;YYYY&apos;: return String(year); case &apos;M&apos;: return String(month); case &apos;MM&apos;: return this.padStart(month); case &apos;D&apos;: return String(day); case &apos;DD&apos;: return this.padStart(day); case &apos;d&apos;: return String(week); case &apos;dd&apos;: return weeks[week]; case &apos;ddd&apos;: return &apos;周&apos; + weeks[week]; case &apos;dddd&apos;: return &apos;星期&apos; + weeks[week]; case &apos;h&apos;: return String(hour); case &apos;hh&apos;: return this.padStart(hour); case &apos;m&apos;: return String(minute); case &apos;mm&apos;: return this.padStart(minute); case &apos;s&apos;: return String(second); case &apos;ss&apos;: return this.padStart(second); default: return match; &#125; &#125;); &#125;&#125;export const moment = (arg) =&gt; &#123; return new Moment(arg);&#125;; 这样就直接可以把moment.js 干掉了，包体积又小了不少。 下面是优化后的analyzer生成出来的包大小情况 包体从2.7M优化到了1.7M，gzip从297k减小到212k，访问虽然只是快了一点点，但在低网速环境下访问还是看得到区别的。 首屏加载视觉优化接下来讲一个跟包大小无关又很重要的优化点，就是单页应用的第一个入口html，正常情况下入口html只是用来加载js包，等js加载完之后才渲染出相关界面出来，这个入口html本身没有内容展示，但它是整个网站的第一个请求，取到这个入口html之后才开始加载js，等到加载完js才开始渲染界面，这段时间是占网站整体加载时间最多的，如下图： 第一个请求只要128ms，直到加载完公共js渲染出界面需要1s左右，这时候如果入口index没内容的话那就是纯粹的白屏时间了，所以我们应该好好利用这个入口index.html，可以做一个骨架屏或者loading动画，能让用户在等白屏时间里能够有个界面能看到，停留时间会更长一些，也能让用户以为这个网站一下就刷出来看到东西的感觉。 对于这个入口index的利用，我是加入了顶部导航栏进去的，让用户可以第一眼看到导航栏知道有什么导航项，而且也是可以点进去的，而内容区对于不同的路径访问会有不同的界面，所以我就简单的弄个loading即可。 至此，这一版优化减少了加载的时间，同时合理利用了入口index作为loading页，提高用户体验。 总结前端优化工作是一个长期且复杂的工作，有很多可以考虑的地方，可以根据网络环境、框架、用户群体、业务情况、代码结构等多个方面合理地安排选择优化方案，本文只是我对于现有公司官网的优化的一部分，在这里分享给大家，如果觉得有用就点个赞吧👍","categories":[],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://lipten.github.io/tags/javascript/"},{"name":"前端","slug":"前端","permalink":"http://lipten.github.io/tags/前端/"},{"name":"webpack","slug":"webpack","permalink":"http://lipten.github.io/tags/webpack/"}]},{"title":"记第一次在程序中埋彩蛋🎁","slug":"记第一次在程序中埋了彩蛋","date":"2018-08-28T06:08:12.000Z","updated":"2018-08-28T09:14:05.742Z","comments":true,"path":"2018/08/28/记第一次在程序中埋了彩蛋/","link":"","permalink":"http://lipten.github.io/2018/08/28/记第一次在程序中埋了彩蛋/","excerpt":"","text":"记第一次在程序中埋彩蛋写在前面相信进来的观众一定很想知道我究竟埋了什么彩蛋🤔，这里说的“彩蛋”，指的是程序里的彩蛋(我的理解是一种区别于程序本身别有洞天的一番景象，并具有一定代表意义的小程序📟)，我埋的彩蛋的是在一个网站里的，彩蛋必须是玩家自己找到才有用的😎，先看看下面的彩蛋提示再进入网站找彩蛋哈😜。 彩蛋提示埋彩蛋的程序是编程猫官网，用浏览器访问，再打开浏览器的开发者工具的控制台📟。可以看到一个大大的codemao字符画(如果看不清楚可以拉大控制台的窗口大小)，就是下面这个字符画 12345678 █████ ░░███ ██████ ██████ ███████ ██████ █████████████ ██████ ██████ ███░░███ ███░░███ ███░░███ ███░░███░░███░░███░░███ ░░░░░███ ███░░███░███ ░░░ ░███ ░███░███ ░███ ░███████ ░███ ░███ ░███ ███████ ░███ ░███░███ ███░███ ░███░███ ░███ ░███░░░ ░███ ░███ ░███ ███░░███ ░███ ░███░░██████ ░░██████ ░░████████░░██████ █████░███ █████░░████████░░██████ ░░░░░░ ░░░░░░ ░░░░░░░░ ░░░░░░ ░░░░░ ░░░ ░░░░░ ░░░░░░░░ ░░░░░░ 发挥你们的探索能力🤓，看看能不能在控制台里找到跟这个字符画有关的彩蛋。 找到的话如果觉得有意思的话可以点个赞👍或者发评论提点提点🙏，有更好的想法都可以提哈🤘。 没找到的话下面就是彩蛋答案📋，但是记住彩蛋必须是玩家自己找到才有用的🤗，所以想清楚再决定看不看答案。 彩蛋答案其实很容易能找到彩蛋，当你看到控制台上那么显眼的codemao字符画时，其实重点不在字符画，而是codemao这几个字符，尝试在控制台里输入codemao，你会发现codemao是一个全局变量，按回车打印出来的值就是彩蛋入口了！而打印出来的值就是”恭喜少年，你找到了编程猫的第一颗彩蛋，输入 start(); 后即可开始《编程猫躲车车》游戏！”，继续在控制台输入start()即可触发彩蛋游戏。 埋这个彩蛋的缘由和我的想法：为啥突然想到要在自己开发的网站上埋这个彩蛋呢🤔，可能是因为开发工作时间长了👨‍💻‍，想在工作中增加点趣味👩‍🎨‍，也可以给用户一个耳目一新的感觉，自己擅自加了这么个需求哈哈😜。做完这个彩蛋之后给到产品经理看，觉得很有意思，而且具有传播价值，所以值得一试。然而有个运营同事听闻此事后却跟我说起教来，“彩蛋应该怎么做才有价值，才能运营起来blablabla”的😳，我是听不懂，作为一个程序员，我觉得不要为了“埋彩蛋”而“埋彩蛋”，我做这个彩蛋的时候没有太多想法🙄，并不是考虑怎么运营才怎么设计的，也不是想着怎么设计彩蛋而设计彩蛋。 “史上第一款含有彩蛋的游戏”——《冒险/魔幻历险(Adventure)》深入人心😋，而《Starship 1》的开发者因为年代久远，Ron Milner早已忘记该怎么触发彩蛋，40多年后查了代码费尽周折才找到😝。 我觉得一个程序员在自己的程序里埋彩蛋，完全是出于自己的第一想法😏，这个想法可以是像Warren Robinett一样为了打破雅达利的约束让自己的名字留在游戏里😠，也可以像Ron Milner一样为了让玩家探索彩蛋，发现自己的名字，得到10条命的奖励🤑。 而我设计这个彩蛋的想法😉，是因为我发现了可以在控制台里跑起来的字符小游戏《编程猫躲车车》，这有别于编程猫创作工具做出来的作品，一贯的在网页里运行的小游戏，同样是简单的操作，放到控制台运行却别有一番天地，虽然画质低劣又清奇，体验也差，但足以达到我理解的彩蛋效果，有别于程序本身的小游戏，codemao代表了编程猫，说不定还能激发用户的创作欲望和创意呢。。。 以上纯属个人观点，如有写的不正当的地方可以权威批评 最后其实这个彩蛋游戏是从网上搬过来的，只是换了猫和车而已，感谢知乎大佬小芋头君的分享，啥也不说了，源码奉上： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114(function()&#123; if(!window.console)&#123;window.console =&#123;log:function()&#123;&#125;&#125;;return;&#125; var me = 19; var Star = function()&#123; this.x=0; this.speed = 1; this.y=0; &#125; var score = 0; var strs = function()&#123; var result = ''; for(var i=0;i&lt;20;i++)&#123; result+=\"\\n\" for(var n =0;n&lt;40;n++)&#123; var now = '一' if(i==19&amp;&amp;n==me)&#123; now=\"码\" &#125; if(i==19&amp;&amp;n==me+1)&#123; now=\"农\" &#125; stars.forEach(function(star)&#123; var x= Math.floor(star.x); var y = Math.floor(star.y) if(x==n&amp;&amp;y==i)&#123; if(Math.abs(star.y-19)&lt;1&amp;&amp;(n==me||n==me+1))&#123; die() &#125; now=\"车\" &#125; &#125;) result+=now; &#125; &#125; result+=\" 《全民躲车车》得分：\"+score return result; &#125; window.onkeydown = function(e)&#123; if(e.keyCode==37)&#123; me-=1; if(me&lt;0) me=0; &#125;else if(e.keyCode==39)&#123; me+=1 if(me&gt;38) me=38 &#125;&#125;var count=0;var die = function()&#123; clearInterval(timer1) clearInterval(timer2) clearInterval(timer3) setTimeout(function()&#123; console.log(\"游戏结束，您的得分：\"+score+\",分享到微博：%o\",\"http://service.weibo.com/share/share.php?url=http%3A%2F%2Ftangeche.com&amp;pic=http://img.souche.com/test/aab0c3d397799533e446759083c2f97c.gif&amp;title=%E6%88%91%E5%9C%A8%E3%80%90%E5%BC%B9%E4%B8%AA%E8%BD%A6%E3%80%91%E7%8E%A9%E7%A0%81%E5%86%9C%E4%B8%93%E6%9C%89%E6%B8%B8%E6%88%8F%E3%80%8A%E7%A0%81%E5%86%9C%E8%BA%B2%E8%BD%A6%E8%BD%A6%E3%80%8B%E8%8E%B7%E5%BE%97%E4%BA%86\"+score+\"%E5%88%86%2C%E5%BF%AB%E6%9D%A5%E6%8C%91%E6%88%98%E6%AF%94%E6%AF%94%E7%9C%8B%E3%80%82%E7%94%A8%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%93%E5%BC%80www.tangeche.com%E9%A6%96%E9%A1%B5%EF%BC%8C%E6%89%93%E5%BC%80%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E7%9A%84%E6%8E%A7%E5%88%B6%E5%8F%B0%EF%BC%8C%E8%BE%93%E5%85%A5start%28%29%3B%E5%9B%9E%E8%BD%A6%EF%BC%8C%E7%84%B6%E5%90%8E%E6%8C%89%E7%85%A7%E6%8F%90%E7%A4%BA%E5%8D%B3%E5%8F%AF%E5%BC%80%E5%A7%8B%E6%B8%B8%E6%88%8F%E3%80%82%40%E5%BC%B9%E4%B8%AA%E8%BD%A6\") &#125;,100)&#125;var stars = []var appearP = 1var timer1,timer2,timer3;var begin = function()&#123; timer1 = setInterval(function()&#123; var createCount=Math.floor(Math.random()*5*appearP) for(var i=0;i&lt;createCount;i++)&#123; var star = new Star(); star.x = Math.floor(Math.random()*40) star.y = 0; star.speed = Math.random()*appearP;//Math.floor(Math.random()*3+1) stars.push(star) &#125; &#125;,1000) timer2 = setInterval(function()&#123; stars.forEach(function(star,i)&#123; star.y+=star.speed; if (star.y&gt;=31)&#123; stars.splice(i,1); score++ &#125; &#125;) console.log(strs()) count++; if(count&gt;300)&#123; console.clear() count = 0; &#125; &#125;,100) timer3 = setInterval(function()&#123; appearP*=1.1 &#125;,3000)&#125;console.log(\"输入 start(); 后即可开始《码农躲车车》游戏！\")window.start = function()&#123; appearP=1.1 starts=[]; score=0; me = 19; count = 0; console.log(\"%c请先用鼠标点击一下弹个车网页页面，游戏需要捕捉网页上的键盘事件（你应该懂吧）！\",\"font-size:16px;color:#ff6700;\") console.log(\"使用键盘左右键移动最下方的码农，躲开所有的汽车，汽车数量和速度会一直增加，看看谁坚持的最久吧！\") var countdown = 6; setTimeout(function()&#123; if(countdown--&lt;=1)&#123; begin(); &#125;else&#123; console.log(countdown) setTimeout(arguments.callee,1000) &#125; &#125;,1000) return (\"倒计时！\")&#125;&#125;)();","categories":[],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://lipten.github.io/tags/javascript/"},{"name":"分享创造","slug":"分享创造","permalink":"http://lipten.github.io/tags/分享创造/"}]},{"title":"js将用户上传gif动图分解成多张帧图片","slug":"js将用户上传gif动图分解成多张帧图片","date":"2018-08-27T08:19:54.000Z","updated":"2018-08-27T09:13:18.763Z","comments":true,"path":"2018/08/27/js将用户上传gif动图分解成多张帧图片/","link":"","permalink":"http://lipten.github.io/2018/08/27/js将用户上传gif动图分解成多张帧图片/","excerpt":"","text":"js将用户上传gif动图分解成多张帧图片写在前面工作中遇到一个这么一个需求：这是一个多图上传的场景，如果用户上传选择多张图片，则上传后直接展示多张图片，如果上传的图片是gif动图，则需要分解这张动图拆分成一帧一帧的单张图片，再按顺序展示出来。 实现思路这里主要针对gif分解多图的实现 首先对用户上传的文件格式进行判断； 将gif动图经过 gif库 解析成gif实例 遍历获取gif实例的每一帧的canvas，转换成baseURL，再转一份file对象存放起来。 通过转换后的baseURL展示到界面，用户点上传就把对应的file对象上传服务器。 这里最核心的就是2，3步，非常庆幸有https://github.com/buzzfeed/libgif-js 这个库，才得以实现后面的步骤； 代码部分由于是公司项目就不展示界面和完整代码，只放关键代码： 0. 引入gif库1import &#123; SuperGif &#125; from &apos;./libgif.js&apos; 1. 对用户上传的文件格式进行判断12345678910111213141516171819202122232425262728293031323334// 判断文件格式并展示的函数pre_upload() &#123; // 点击上传按钮触发弹出文件选择框 const input = document.createElement('input'); input.setAttribute('type', 'file'); // 注意要设置多选属性 input.setAttribute('multiple', 'true'); input.addEventListener('change', (e) =&gt; &#123; this.img_list = []; this.can_upload = true; this.qiniu_url_list = []; // 判断是gif格式则交给this.pre_load_gif函数处理 if (/(image\\/gif)/.test(e.path[0].files[0].type)) &#123; this.pre_load_gif(e.path[0].files[0]) return; &#125; // 如果是上传多张静态的png、jpg图片则直接转换成baseURL var img_list = []; for(let i=0,item; item = e.path[0].files[i]; i++) &#123; if (!/(image\\/png)|(image\\/jp(e?)g)/.test(item.type)) &#123; alert('请上传jpg、png格式的图片') return; &#125; img_list.push(&#123; file_name: item.name, url: URL.createObjectURL(item), file: item, &#125;) &#125; this.img_list = img_list &#125;); input.click();&#125;, 2. 分解gif图片123456789101112131415161718192021222324252627282930313233343536373839dataURLtoFile(dataurl, filename) &#123; const arr = dataurl.split(','); const mime = arr[0].match(/:(.*?);/)[1]; const bstr = atob(arr[1]); var n = bstr.length; const u8arr = new Uint8Array(n); while (n--) &#123; u8arr[n] = bstr.charCodeAt(n); &#125; return new File([u8arr], filename, &#123;type:mime&#125;);&#125;,// 将canvas转换成file对象convertCanvasToImage(canvas, filename) &#123; return this.dataURLtoFile(canvas.toDataURL('image/png'), filename);&#125;,pre_load_gif(gif_source) &#123; var img_list = []; const gifImg = document.createElement('img'); // gif库需要img标签配置下面两个属性 gifImg.setAttribute('rel:animated_src', URL.createObjectURL(gif_source)) gifImg.setAttribute('rel:auto_play', '0') // 新建gif实例 var rub = new SuperGif(&#123; gif: gifImg &#125; ); rub.load(() =&gt; &#123; var img_list = []; for (let i=1; i &lt;= rub.get_length(); i++) &#123; // 遍历gif实例的每一帧 rub.move_to(i); // 将每一帧的canvas转换成file对象 let cur_file = this.convertCanvasToImage(rub.get_canvas(), gif_source.name.replace('.gif', '') + `-$&#123;i&#125;`) img_list.push(&#123; file_name: cur_file.name, url: URL.createObjectURL(cur_file), file: cur_file, &#125;) &#125; this.img_list = img_list &#125;);&#125;, 至此，核心功能基本实现，上面的函数已经将gif分解成多张图片存放在this.img_list 这个数组里面。 接下来只要拿img_list数组里的file对象上传到服务器即可。 上传方式各不相同，这里就不放具体代码了，需要注意的是，图片上传是异步操作，多图上传需要得知所有的图片全部上传成功才能确定上传完成，所以如果上传的函数返回的是promise对象，则可以直接用Promise.all函数即可得知所有图片上传完毕的回调。","categories":[],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://lipten.github.io/tags/javascript/"}]},{"title":"时隔两年，更新了一下下以前的教程网站。","slug":"时隔两年，更新了一下下以前的教程网站。","date":"2018-08-27T07:49:50.000Z","updated":"2018-08-28T06:00:09.338Z","comments":true,"path":"2018/08/27/时隔两年，更新了一下下以前的教程网站。/","link":"","permalink":"http://lipten.github.io/2018/08/27/时隔两年，更新了一下下以前的教程网站。/","excerpt":"","text":"写在前面事情的缘由：https://www.v2ex.com/t/275010#reply63以前脑袋一热写了个教程网站：http://codeasily.net 更新内容： 这次用 vue 框架结合Tiny-editor做个简单的编辑器，仿造 jsbin，还自己实现了 console 面板; 再把之前的教程网站放进来，加个编辑器的入口。 之前的多说评论插件挂了，貌似现在国内的免费评论插件基本挂了，换成了来必力的评论插件，需要翻墙额。 体验编辑器可以进入 http://www.codeasily.net/editor 有话想说回顾两年前的那篇帖子，以前那个时候学习前端的教程资源和对前端的认知比较守旧👨‍🌾‍，所以自己写教程👨‍💻‍，当时还有很多评论说做的挺好希望出多点教程，可惜毕业后一直忙于工作而且写教程消耗大量时间精力，就一直搁着了，非常感谢当时鼓励我的小伙伴👏。 现在翻看慕课网的一些课程，确实与时俱进多了一些前端真正该学的东西并且能提高行业竞争力的教程📚，出来工作 2 年认识的前端开发人员的整体姿势水平都提高了📈，也包括我自己😌。 这次做的这个编辑器只是为了完善两年前写的丑丑的 demo，改善一下界面和体验，还有今年写了个 web 端的 console 组件，用来填补这个编辑器的一个功能，也当做学习了。 我做这个编辑器不为发展成主业或者明星产品，市面上功能更强大的编辑器有很多，只是我喜欢动手体验学习，即使是轮子，只要能给我带来提升，都值得一试☝️ 我是一个喜欢实践代替看教程的人，即使做的不怎么样，自己心里觉得满足就够了👌","categories":[],"tags":[{"name":"分享创造","slug":"分享创造","permalink":"http://lipten.github.io/tags/分享创造/"}]},{"title":"TypeScript + 大型项目实战","slug":"TypeScript-大型项目实战","date":"2018-07-24T06:06:28.000Z","updated":"2018-08-03T11:01:12.664Z","comments":true,"path":"2018/07/24/TypeScript-大型项目实战/","link":"","permalink":"http://lipten.github.io/2018/07/24/TypeScript-大型项目实战/","excerpt":"","text":"转载地址：https://juejin.im/post/5b54886ce51d45198f5c75d7 TypeScript + 大型项目实战写在前面 TypeScript 已经出来很久了，很多大公司很多大项目也都在使用它进行开发。上个月，我这边也正式跟进一个对集团的大型运维类项目。 项目要做的事情大致分为以下几个大模块 一站式管理平台 规模化运维能力 预案平台 巡检平台 全链路压测等 每一个模块要做的事情也很多，由于牵扯到公司业务，具体要做的一些事情这里我就不一一列举了，反正项目整体规模还是很大的。 一、关于选型在做了一些技术调研后，再结合项目之后的开发量级以及维护成本。最终我和同事在技术选型上得出一致结论，最终选型定为 Vue 最新全家桶 + TypeScript。 那么问题来了，为什么大型项目非得用 TypeScript 呢，ES6、7 不行么？ 其实也没说不行，只不过我个人更倾向在一些协作开发的大型项目中使用 TypeScript 。下面我列一些我做完调研后自己的一些看法 首先，TypeScript 具有类型系统，且是 JavaScript 的超集。 JavaScript 能做的，它能做。JavaScript 不能做的，它也能做。 其次，TypeScript 已经比较成熟了，市面上相关资料也比较多，大部分的库和框架也读对 TypeScript 做了很好的支持。 然后，保证优秀的前提下，它还在积极的开发完善之中，不断地会有新的特性加入进来 JavaScript 是弱类型并且没有命名空间，导致很难模块化，使得其在大型的协作项目中不是很方便 vscode、ws 等编辑器对 TypeScript 支持很友好 TypeScript 在组件以及业务的类型校验上支持比较好，比如 123456789101112131415161718192021222324252627// 定义枚举const enum StateEnum &#123; TO_BE_DONE = 0, DOING = 1, DONE = 2&#125;// 定义 item 接口interface SrvItem &#123; val: string, key: string&#125;// 定义服务接口interface SrvType &#123; name: string, key: string, state?: StateEnum, item: Array&lt;SrvItem&gt;&#125;// 然后定义初始值（如果不按照类型来，报错肯定是避免不了的）const types: SrvType = &#123; name: &apos;&apos;, key: &apos;&apos;, item: []&#125;","categories":[{"name":"前端","slug":"前端","permalink":"http://lipten.github.io/categories/前端/"}],"tags":[{"name":"typescript","slug":"typescript","permalink":"http://lipten.github.io/tags/typescript/"}]},{"title":"vue-slidePage 基于slidePage的vue插件版","slug":"vue-slidePage-基于slidePage的vue插件版","date":"2018-07-21T16:27:54.000Z","updated":"2018-08-03T11:01:12.668Z","comments":true,"path":"2018/07/21/vue-slidePage-基于slidePage的vue插件版/","link":"","permalink":"http://lipten.github.io/2018/07/21/vue-slidePage-基于slidePage的vue插件版/","excerpt":"","text":"vue-slidePageIntroductionvue-slidePage is a fullscreen scrolling component of Vue.js, Based on slidePage Demo simple custom UsageInstall1$ npm i -S vue-slidepage Work on a Vue instance: 12345&lt;slide-container&gt; &lt;slide-page v-for=\"(item, index) in list\"&gt; &lt;h2&gt;&#123;&#123;item.name&#125;&#125;&lt;/h2&gt; &lt;/slide-page&gt;&lt;/slide-container&gt; 123456789101112131415161718import &#123; SlideContainer, SlidePage &#125; from 'vue-slidePage'new Vue( &#123; el: 'body', data () &#123; return &#123; list: [ &#123;name: 'Page1'&#125;, &#123;name: 'Page2'&#125;, &#123;name: 'Page3'&#125;, ], &#125; &#125;, components: &#123; SlideContainer, SlidePage &#125;&#125; ) PropsSlideContainer: name type default description useAnimation Boolean true 是否开启动画 refresh Boolean true 每次滚动进入是否重新执行动画 useWheel Boolean true 是否开启鼠标滚轮滑动 useSwipe Boolean true 是否开启移动端触控滑动 EventsSlideContainer: name description $event before 每次\b\b全屏滚动前触发事件，\b回调三个参数(origin, direction, target)，分别是滚动前的page序号、方向(‘next’/‘prev’)、滚动后的page序号 $event.before after 次\b\b全屏滚动后触发事件，\b回调三个参数(origin, direction, target)，参数释义同上 $event.after SlotsSlidePage: name description default Page’s content usage:1234567&lt;slide-container&gt; &lt;slide-page&gt; &lt;img src=\"\"&gt; &lt;p&gt;&lt;/p&gt; &lt;button&gt;&lt;/button&gt; &lt;/slide-page&gt;&lt;/slide-container&gt; LicenseMIT","categories":[{"name":"前端","slug":"前端","permalink":"http://lipten.github.io/categories/前端/"}],"tags":[{"name":"github","slug":"github","permalink":"http://lipten.github.io/tags/github/"},{"name":"slidePage","slug":"slidePage","permalink":"http://lipten.github.io/tags/slidePage/"}]},{"title":"slidePage-出react版本啦","slug":"slidePage-出react版本啦","date":"2018-07-21T16:17:13.000Z","updated":"2018-08-03T11:01:12.664Z","comments":true,"path":"2018/07/21/slidePage-出react版本啦/","link":"","permalink":"http://lipten.github.io/2018/07/21/slidePage-出react版本啦/","excerpt":"","text":"react-slidePage这个react版本是依赖于slidePage的基础上用react实现的小插件，后续slidePage更新了，这个react-slidePage也会自动更新的哟。 Introductionreact-slidePage is a fullscreen scrolling component of React, Based on slidePage Demo simple custom UsageInstall1$ npm i -S react-slidepage Work on a React instance: 123456789101112131415161718192021222324252627import &#123; SlideContainer, SlidePage &#125; from 'react-slidePage'class App extends React.Component &#123; constructor(props) &#123; super(props); this.state = &#123; list: [ &#123;name: 'Page1', class: 'page1'&#125; &#123;name: 'Page2', class: 'page2'&#125; ] &#125; &#125; render() &#123; return ( &lt;SlideContainer&gt; &#123; this.state.list.map((item, index) =&gt; &#123; return ( &lt;SlidePage className=&#123;item.class&#125;&gt; &#123;item.name&#125; &lt;/SlidePage&gt; ) &#125;) &lt;/SlideContainer&gt; ) &#125;&#125; PropsSlideContainer: name type default description page Number 1 初始页码 useAnimation Boolean true 是否开启动画 refresh Boolean true 每次滚动进入是否重新执行动画 useWheel Boolean true 是否开启鼠标滚轮滑动 useSwipe Boolean true 是否开启移动端触控滑动 Events PropsSlideContainer: name description before 每次\b\b全屏滚动前触发事件，\b回调三个参数(origin, direction, target)，分别是滚动前的page序号、方向(‘next’/‘prev’)、滚动后的page序号 after 次\b\b全屏滚动后触发事件，\b回调三个参数(origin, direction, target)，参数释义同上 LicenseMIT","categories":[{"name":"前端","slug":"前端","permalink":"http://lipten.github.io/categories/前端/"}],"tags":[{"name":"github","slug":"github","permalink":"http://lipten.github.io/tags/github/"},{"name":"slidePage","slug":"slidePage","permalink":"http://lipten.github.io/tags/slidePage/"}]},{"title":"Tiny-editor-可实时运行的代码编辑器","slug":"Tiny-editor-可实时运行的代码编辑器","date":"2018-07-21T15:23:28.000Z","updated":"2018-08-03T11:01:12.656Z","comments":true,"path":"2018/07/21/Tiny-editor-可实时运行的代码编辑器/","link":"","permalink":"http://lipten.github.io/2018/07/21/Tiny-editor-可实时运行的代码编辑器/","excerpt":"","text":"Tiny-editorDemo:http://lipten.link/demo/editor -update v0.1-1.测试版，目前有个别功能不稳定。 Usage1、下载Tiny-editor1git clone https://github.com/lipten/Tiny-editor.git 2、引用相关文件1&lt;link rel=&quot;stylesheet&quot; href=&quot;Tiny-editor.css&quot;/&gt; 3、引用js文件12&lt;script src=&quot;http://cdn.bootcss.com/ace/1.2.3/ace.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;Tiny-editor.js&quot;&gt;&lt;/script&gt; 4、html结构1//--html结构比较复杂，看下载后的editor.html比较完整 5、初始化代码1var Tiny = new TinyEditor() MethodTiny.tab(num)tab显示第几个面板，num传序号，从1开始 Tiny.run()运行结果并跳到result面板 Tiny.save()保存代码至缓存 Tiny.fullScreen()全屏模式开启或关闭 Tiny.dockMode()dock边栏模式开启或关闭 Tiny.liveMode()实时运行模式，发生change事件时执行一次，仅开启dock模式的前提下才能开启","categories":[{"name":"前端","slug":"前端","permalink":"http://lipten.github.io/categories/前端/"}],"tags":[{"name":"Tiny-editor","slug":"Tiny-editor","permalink":"http://lipten.github.io/tags/Tiny-editor/"},{"name":"github","slug":"github","permalink":"http://lipten.github.io/tags/github/"}]},{"title":"slidePage-轻量灵活的全屏滚动插件","slug":"slidePage-轻量灵活的全屏滚动插件","date":"2018-07-21T10:43:31.000Z","updated":"2018-08-03T11:01:12.668Z","comments":true,"path":"2018/07/21/slidePage-轻量灵活的全屏滚动插件/","link":"","permalink":"http://lipten.github.io/2018/07/21/slidePage-轻量灵活的全屏滚动插件/","excerpt":"","text":"slidePage slidePage现已推出3.0, 吸取了上一版本slidePage v2.1.1 的各种经验，弥补不足，与v2.1.1不同的是移除了对jquery和zepto的依赖，精简到只有一个js文件，优化了接口调用方式，更适合主流的前端框架，另外还有基于vue的插件版本vue-slidePage和基于react的插件版本react-slidePage Demo: simple animated scroll custom fullFeatured FeaturedslidePage3 特别适合主流前端框架开发，无任何依赖库，源代码只有12kb，Gzip\b压缩后仅有2.4k, 接口符合插件具有的初始化、销毁、重载的方法，\b适配PC和移动端，具有单屏内容滚动、手动播放动画、动态重绘等特色功能，具体查看完整示例: fullFeatured Documentation: Usage Install slidePage Including files Required HTML structure Initialization Configuration Options Using Animation Methods slidepage.slideNext() slidepage.slidePrev() slidepage.slideTo(page) slidepage.slideFile(page) slidepage.destroy() slidepage.update() UsageInstall slidePage12345// With npmnpm install slidePage// With bowerbower install slidePage Including files123&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;slidePage.css&quot;&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;slidePage.js&quot;&gt;&lt;/script&gt; Required HTML structure1234567891011121314&lt;div class=&quot;slide-container&quot; id=&quot;slide-container&quot;&gt; &lt;div class=&quot;slide-page page1&quot;&gt; &lt;div class=&quot;container&quot;&gt; &lt;h2&gt;page1&lt;/h2&gt; &lt;p&gt;page1 content&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;slide-page page2&quot;&gt; &lt;div class=&quot;container&quot;&gt; &lt;h2&gt;page2&lt;/h2&gt; &lt;p&gt;page2 content&lt;/p&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 您可以查看完整examples里的html文件结构 fullFeatured.html Initialization1new slidePage() Configuration12345678910111213var slidepage = new slidePage(&#123; slideContainer: &apos;#slide-container&apos;, slidePages: &apos;.slide-item&apos;, page: 1, refresh: true, useWheel: true, useSwipe: true, useAnimation : true, // Events before: function(origin,direction,target)&#123;&#125;, after: function(origin,direction,target)&#123;&#125;, &#125;); Options 在slidePage中，page指的是每一次全屏滚动的一屏，也可以理解为每一屏对应的页码，必须是1以上的整数 name type default description slideContainer String|Element ‘.slide-container’ 指定slidePage要运行的容器选择器或元素 slide\bPages String|NodeList|HTMLCollection ‘.slide-page’ 指定slideContainer容器里每个page的选择器或元素 page Number 1 首次进入的page页码 useAnimation Boolean true 是否开启动画 refresh Boolean true 每次滚动进入是否重新执行动画 useWheel Boolean true 是否开启鼠标滚轮滑动 useSwipe Boolean true 是否开启移动端触控滑动 Events name description before 每次\b\b全屏滚动前触发事件，\b回调三个参数(origin, direction, target)，分别是滚动前的page序号、方向(‘next’|’prev’)、滚动后的page序号 after 每次\b\b全屏滚动后触发事件，\b回调三个参数(origin, direction, target)，参数释义同上 Using Animation 为了方便示例用animate.css，动画效果可以自己实现 Include animate.css1&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/animate.css@3.5.2/animate.min.css&quot;&gt; HTML structure1&lt;div class=&quot;step animated fadeIn&quot; data-delay=&quot;1300&quot;&gt;&lt;/div&gt;; 在想要动画控制的元素上加上step类，并加上css动画类名即可使用动画，data-delay属性控制动画延时播放(默认为100毫秒); 手动触发动画1&lt;div class=&quot;lazy animated fadeIn&quot;&gt;&lt;/div&gt; 在想要手动播放动画的元素上加上lazy类，并加上css动画类名即可使用动画，可以加上data-delay使触发时再延时播放; 通过slidepage.slideFire(page)指定某一页的lazy动画触发播放。 Methodsslidepage.slideNext()滑动定位到下一屏 slidepage.slidePrev()滑动定位到上一屏 slidepage.slideTo(page)传入page页码，滑动定位到对应的page slidepage.slideFile(page)触发对应 \bpage 的lazy手动动画 slidepage.destroy()销毁当前实例，移除\b所有事件\b恢复class属性值。 slidepage.update(newSlidePages)当html里的page发生变化时需要执行动态更新。 newSlidePages参数非必填，仅应对于初始化的时候slidePages参数传入的是\bNodeList或HTMLCollection时\b才需要在更新的时候再传一次变化后的DOM结构通知更新。 \b&gt; 此方法非常适合现在流行的数据驱动型框架，当模型数据驱动改变pege的排列时，执行update可以起到更新的作用，可以先看示例源码了解：custom.html","categories":[{"name":"前端","slug":"前端","permalink":"http://lipten.github.io/categories/前端/"}],"tags":[{"name":"github","slug":"github","permalink":"http://lipten.github.io/tags/github/"},{"name":"slidePage","slug":"slidePage","permalink":"http://lipten.github.io/tags/slidePage/"}]}]}